<?php
/******************************************************************
* Copyright Â© 2012 ICT Innovations, All Rights Reserved           *
* License: GNU AGPL V 3.0                                         *
* Developed By: Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Modified By:  Falak Nawaz                                       *
* Website : http://www.ictinnovations.com/                        *
* Contact : support@ictinnovations.com, info@ictinnovations.com   *
******************************************************************/

// $Id: broadcast_sms.module,v 1.0 2009/10/16 18:08:59 ictinnovations Exp $


/**
 * Implementation of hook_menu().
 *
 * Defines six menu entries: an SMS page that lists all sms in the module's
 * database table, add and edit/add/delete pages for each sms
 */
 
function broadcast_sms_menu() {
  $items = array();

  $items['admin/broadcast/sms'] = array(
    'title'            => 'SMS Settings',
    'description'      => 'Configure SMS Broadcasting behavior',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_sms_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast sms system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on sms module.
 */
function broadcast_sms_permission() {
  return array(
    'broadcast sms system admin' => array('title'=> 'broadcast sms system admin')
  );
}

/**
 * Loader function for individual SMSs.
 *
 * @param $sms_id
 *   An int containing the ID of a sms.
 * @return
 *   A single sms in array format, or FALSE if none matched the incoming ID.
 */
function broadcast_sms_campaign_message_load($campaign_id, $campaign) {
  if(!empty($campaign['campaign_type']) && $campaign['campaign_type']=='sms'){
    $sql    = "SELECT * FROM {broadcast_sms} WHERE campaign_id = :campaign_id";
    $result = db_query($sql, array(':campaign_id'=>$campaign_id));
    if ($sms = $result->fetchAssoc()) {
      return $sms;
    } else {
      drupal_set_message(t('Specified SMS does not exist! or you have not proper permissions!'), 'error');
      return FALSE;
    }
  }
}

function broadcast_sms_supported_types() {
  return array('sms'=> t('SMS Campaign'));
}

/**
 * Build the sms message editing form.
 *
 * @ingroup forms
 * @see broadcast_sms_campaign_message_submit()
 */
function broadcast_sms_campaign_message($form_state, $campaign = array()) {
  if(!empty($campaign['campaign_type']) && $campaign['campaign_type']=='sms'){
    // It's safe to use on both an empty array, and an incoming array with full or partial data.
    $campaign += array(
      'message' => '',
    );
    
    
    // If we're editing an existing sms, we'll add a value field to the form
    // containing the sms's unique ID.
    if (!empty($campaign['sms_id'])) {
      $form['sms_id'] = array(
        '#type'        => 'value',
        '#value'       => $campaign['sms_id'],
      );
    }

    $form['sms'] = array(
      '#type'          => 'fieldset',
      '#title'         => t('SMS Message'),
    );

    $form['sms']['message'] = array(
      '#type'          => 'textarea',
      '#title'         => t('Message Text'),
      '#required'      => TRUE,
      '#default_value' => $campaign['message'],
    );
    $form['sms']['campaign_type'] = array(
    '#type'          => 'value',
    '#default_value' => 'sms',
    );
    return $form;
  }
}

function broadcast_sms_campaign_message_validate($form, $form_state) {
  // no validation required
  if(!empty($campaign['campaign_type']) && $campaign['campaign_type']=='sms'){
    return true;
  }
}

/**
 * Inserts a new sms, or updates an existing one.
 *
 * @param $sms
 *   A sms to be saved. If $sms['sms_id'] is set, the sms will be updated.
 *   Otherwise, a new sms will be inserted into the database.
 * @return
 *   The saved sms, with its ID set.
 */
function broadcast_sms_campaign_message_submit($form, $form_state, $campaign) {
  global $user;
  if(!empty($campaign['campaign_type']) && $campaign['campaign_type']=='sms'){
    $sms = $form_state['values'];
    // save the sms
    if (isset($sms['sms_id'])) {
      drupal_write_record('broadcast_sms', $sms, 'sms_id');
    } else {
      drupal_write_record('broadcast_sms', $sms);
    }
  }
}

/**
 * Deletes a sms, according to given campaign ID.
 *
 * @param $sms
 *   An array of sms containing the ID of a sms and assigned groups.
 */
function broadcast_sms_campaign_message_delete($campaign) {
  if(!empty($campaign['campaign_type']) && $campaign['campaign_type']=='sms'){
    $sql = 'DELETE FROM {broadcast_sms} WHERE campaign_id = :campaign_id';
    db_query($sql, array(':campaign_id'=> $campaign['campaign_id']));
  }
}

function broadcast_sms_admin_settings() {
  $form['sms'] = array(
    '#type'  => 'fieldset',
    '#title' => t('SMS Settings')
  );
  $form['sms']['broadcast_sms_default_gateway'] = array(
    '#type'          => 'select',
    '#title'         => t("Default SMS Gateway"),
    '#options'       => _broadcast_sms_get_gateways(),
    '#default_value' => variable_get('broadcast_sms_default_gateway', 'broadcast_dummy'),
    '#description'   => t('Select which gateway will be used for outgoing SMS'),
  );
  return system_settings_form($form);
}

/********************************************************
*             FUNCTION FOR BACKGROUND TASK              *
********************************************************/

/* Enumerate all SMS gateways
*****************************/
function _broadcast_sms_get_gateways() {
  $gateways = array();

  foreach (module_list() as $module) {
    $function = $module . '_supported_services';
    if (function_exists($function)) {
      $services = $function();
      if (isset($services['sms'])) {
        $gateways[$module] = $services['sms'];
      }
    }
  }

  return $gateways;
}

/* Get, load, and test default SMS gateway
******************************************/
function broadcast_sms_get_gateway($campaign_id) {
  static $sms_gateway      = FALSE;
  static $gateway_loaded   = FALSE;
  static $function_ready   = FALSE;
  static $function_deliver = FALSE;

  if (!$gateway_loaded) {
    $sms_gateway      = variable_get('broadcast_sms_default_gateway', 'broadcast_dummy');
    $function_load    = $sms_gateway . '_load';
    $function_ready   = $sms_gateway . '_is_ready';
    $function_deliver = $sms_gateway . '_deliver_sms';

    $gateway_loaded   = $function_load('sms', $campaign_id);
  }

  if ($gateway_loaded) {
    // Wait until gateway is ready
    // TODO: timeout ??
    while (!$function_ready('sms')) {
      usleep(200000); // 200000 = 0.2 second
    }
    return $function_deliver;
  } else {
    return FALSE;
  }
}

/* Ask gateway to check weather message is OK to deliver
********************************************************/
function broadcast_sms_get_message($campaign_id) {
    $sms = broadcast_sms_campaign_message_load($campaign_id);

    $sms_gateway      = variable_get('broadcast_sms_default_gateway', 'broadcast_dummy');
    $function_prepare = $sms_gateway . '_message_prepare';

    return $function_prepare('sms', $sms['message']);
}

/* Enumerate all SMS gateways
*****************************/
function broadcast_sms_deliver($campaign_id, $contact_id, $log_id) {
  static $sms_message       = FALSE;
  static $message_variables = array('%firstname', 
                                    '%lastname', 
                                    '%phone', 
                                    '%email', 
                                    '%company'
                                   );

  if (!$sms_message) {
    $sms_message = broadcast_sms_get_message($campaign_id);
    //TODO: what to do if it failed
  }

  $gateway_deliver = broadcast_sms_get_gateway($campaign_id);
  //TODO: what to do if gateway is not ready

  $contact         = broadcast_contact_load($contact_id);
  $message_values  = array($contact['first_name'], 
                           $contact['last_name'], 
                           $contact['phone'], 
                           $contact['email'], 
                           $contact['company']
                          );

  // customize message for each contact by replacing variables (if used) with there values
  $message_custom  = str_replace($message_variables, $message_values, $sms_message);

  $deliver_result  = $gateway_deliver($contact['phone'], $message_custom, $log_id);

  return $deliver_result;
  
}
