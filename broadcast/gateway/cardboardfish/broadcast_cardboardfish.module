<?php
/******************************************************************
* Copyright Â© 2012 ICT Innovations, All Rights Reserved           *
* License: GNU AGPL V 3.0                                         *
* Developed By: Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Modified By:  Falak Nawaz                                       *
* Website : http://www.ictinnovations.com/                        *
* Contact : support@ictinnovations.com, info@ictinnovations.com   *
******************************************************************/

// $Id: broadcast_cardboardfish.module,v 1.0 2009/10/16 18:08:59 ictinnovations Exp $

/**
 * Implementation of hook_menu().
 *
 * Defines six menu entries: an SMS page that lists all sms in the module's
 * database table, add and edit/add/delete pages for each sms
 */
 
function broadcast_cardboardfish_menu() {
  $items = array();

  $items['admin/broadcast/gateway/cardboardfish'] = array(
    'title'            => 'Card Board Fish Settings',
    'description'      => 'Configure Card Board Fish Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_cardboardfish_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast cardboardfish system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/broadcast/gateway/cardboardfish/setting'] = array(
    'title'            => 'Settings',
    'description'      => 'Configure Card Board Fish Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_cardboardfish_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast cardboardfish system admin'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );

  $items['admin/broadcast/gateway/cardboardfish/test'] = array(
    'title'            => 'Test SMS',
    'description'      => 'Testing SMS with Card Board Fish',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_cardboardfish_test_form'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast cardboardfish system admin'),
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on sms module.
 */
function broadcast_cardboardfish_permission() {
  return array(
    'broadcast cardboardfish system admin' => array('title'=> 'broadcast cardboardfish system admin')
  );
}

function broadcast_cardboardfish_admin_settings() {
  $form['gateway'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Card Board Fish Gateway Settings')
  );

  $form['gateway']['broadcast_cardboardfish_username'] = array(
    '#type'          => 'textfield',
    '#title'         => t("User Name"),
    '#default_value' => variable_get('broadcast_cardboardfish_username', 'username'),
    '#description'   => t('username as provided by Card Board Fish sms service'),
  );

  $form['gateway']['broadcast_cardboardfish_password'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Password"),
    '#default_value' => variable_get('broadcast_cardboardfish_password', 'password'),
    '#description'   => t('password as provided by Card Board Fish sms service'),
  );

  $form['gateway']['broadcast_cardboardfish_source_number'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Source Number"),
    '#default_value' => variable_get('broadcast_cardboardfish_source_number', '1111111111'),
    '#description'   => t('Source Number / Caller ID which will be used for all outgoing messages'),
  );

  return system_settings_form($form);
}

/**
 * Build the campaign editing form.
 *
 * @ingroup forms
 * @see broadcast_cardboardfish_test_form_submit()
 */
function broadcast_cardboardfish_test_form($form, &$form_state, $campaign = array()) {

  $form['test'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Tesitng Card Board Fish Gateway'),
  );

  $form['test']['number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Phone Number'),
    '#required'      => TRUE,
  );

  $form['test']['message'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Message'),
    '#required'      => TRUE,
  );

  $form['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

function broadcast_cardboardfish_test_form_submit($form, &$form_state) {
  $sms = $form_state['values'];

  if (!$result = broadcast_cardboardfish_load('sms')) {
    drupal_set_message(t('Unable to load gateway, message failed!'), 'error');
    $form_state['redirect'] = 'admin/broadcast/gateway/cardboardfish/test';
  }
  
  if ($result && broadcast_cardboardfish_deliver_sms($sms['number'], $sms['message'])) {
    drupal_set_message(t('Message sent successfully!'), 'status');
    $form_state['redirect'] = 'admin/broadcast/gateway/cardboardfish/test';
  } else {
    drupal_set_message(t('Unable to send message, failed!'), 'error');
    $form_state['redirect'] = 'admin/broadcast/gateway/cardboardfish/test';
  }
}

function broadcast_cardboardfish_supported_services() {
  $services = array('sms' => t('Card Board Fish SMS Service'));

  return $services;
}


/********************************************************
*             FUNCTION FOR BACKGROUND TASK              *
********************************************************/

/* Load cardboardsifh labrary
*****************************/
function broadcast_cardboardfish_load($service) {
  global $cardboardfish_sms;
  global $user;

  require_once("SendSMS.php");

  # Your username and password go here
  $sms_username = variable_get('broadcast_cardboardfish_username', 'username');
  $sms_password = variable_get('broadcast_cardboardfish_password', 'password');
  $source       = variable_get('broadcast_cardboardfish_source_number', '1111111111');

  # Construct an SMS object
  $cardboardfish_sms = new SMS();
  $cardboardfish_sms->systemtype   = 'H';
  $cardboardfish_sms->sms_username = $sms_username;
  $cardboardfish_sms->sms_password = $sms_password;

  # Set the source address as user phone number if provided otherwise use default address
  if (isset($user->phone) && $user->phone != '') {
  	$source = $user->phone;
  }
  $OK = $cardboardfish_sms->setSA($source);

  // TODO: SetVP: Validaty Period, SetDR: Delivery Receipt
  # Set delivery receipts to 'on'
  $OK = $cardboardfish_sms->setDR("1");

  return TRUE;
}

function broadcast_cardboardfish_message_prepare($service, $message) {
  // TODO: convert unicode
  return $message;
}

function broadcast_cardboardfish_is_ready($service) {
  // TODO: check server / processor load
  return TRUE;
}

function broadcast_cardboardfish_deliver_sms($phone, $message, $ref_no = '', $parmeters = array()) {
  global $cardboardfish_sms;
  $units = 0;

  # Set the destination address 
  $OK = $cardboardfish_sms->setDA($phone);

  // convert none compatible characters with GSM characters
  $encoded_message = broadcast_cardboardfish_GSMEncode($message);

  // GSM encoded will return false if all characters used in SMS 
  // are not compatible with GSM character set. in this case we 
  // use Unicode / UCS-2 encoding
  if ($encoded_message === FALSE) {
    $OK              = $cardboardfish_sms->setDC(4); // Unicode
    $encoded_message = broadcast_cardboardfish_utf8toucs2($message);
    $units = ceil(strlen($encoded_message) / 280);
  } else {
    $OK    = $cardboardfish_sms->setDC(1); // UTF-7
    $units = ceil(strlen($encoded_message) / 160);
  }

  # Set the message content
  $OK = $cardboardfish_sms->setMSG($encoded_message);

  # Set the user reference
  $OK = $cardboardfish_sms->setUR($ref_no);

  # Send the message and inspect the responses
  $response = broadcast_cardboardfish_send_sms($cardboardfish_sms);

  // TODO: get delivery report
  if ($response === TRUE) {
    return $units;    
  } else {
    return FALSE;
  }
}


function broadcast_cardboardfish_send_sms($sms) {
  $username = urlencode($sms->sms_username);
  $password = urlencode($sms->sms_password);
  $msg = urlencode($sms->message);
  $dcs = $sms->data_coding_scheme;

  if ($dcs == "" || $dcs == 1) {
    $dcs = 6;
  } else if ($dcs == 0) {
    $dcs = 7;
  }

  $request = "http://sms1.cardboardfish.com:9001/HTTPSMS?S={$sms->systemtype}&UN=${username}&P=${password}&DA={$sms->dest_addr}&SA={$sms->source_addr}&M=${msg}";

  if (!$sms->source_addr_ton) {
    preg_match("/\w/", $sms->source_addr, $matches);
    if ($matches) {
      $sms->setST("5");
    }
  }
  # echo "$request\n";
  $request .= broadcast_cardboardfish_includeif ($sms->source_addr_ton, "&ST=");
  $request .= broadcast_cardboardfish_includeif ($dcs, "&DC=");
  $request .= broadcast_cardboardfish_includeif ($sms->delivery_receipt, "&DR=");
  $request .= broadcast_cardboardfish_includeif ($sms->user_reference, "&UR=");
  $request .= broadcast_cardboardfish_includeif ($sms->user_data_header, "&UD=");
  $request .= broadcast_cardboardfish_includeif ($sms->validity_period, "&VP=");
  $request .= broadcast_cardboardfish_includeif ($sms->delay_until, "&DU=");
  $request .= broadcast_cardboardfish_includeif ($sms->local_time, "&LT=");
  # echo "$request\n";
  //watchdog('cardboardfish', 'send message with: @request', array('@request' => $request), WATCHDOG_INFO);
  $ch = curl_init($request);

  if (!$ch) {
    $errstr = "Could not connect to server.";
    return false;
  }
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $serverresponse = curl_exec($ch);

  if (!$serverresponse) {
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $errstr = "HTTP error: $code\n";
    return false;
  }

  preg_match("/(OK.*)\r$/", $serverresponse, $matches);

  if (!isset($matches[0])) {
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    if ($code == 400) {
      $errstr = "(Server) Bad request.";
    } else if ($code == 401) {
      $errstr = "(Server) Invalid username / password.";
    } else if ($code == 402) {
      $errstr = "(Server) Credit too low, payment required.";
    } else if ($code == 503) {
      $errcode = -15;
      $errstr = "(Server) Destination not recognised.";
    } else if ($code == 500) {
      $errstr = "(Server) Error, retry later.";
    }
    return false;
  }

  // $response = $matches[1];
  return TRUE;
}

function broadcast_cardboardfish_utf8toucs2($string) {
  $ucs2 = '';

  $str = bin2hex($string);

  for ($i=0;$i<strlen($str);$i+=2) {
    $substring1 = $str[$i].$str[$i+1];
    $substring2 = $str[$i+2].$str[$i+3];

    if (hexdec($substring1) < 127) {
      $results = "00".$str[$i].$str[$i+1];
    } else {
      $results = dechex((hexdec($substring1)-192)*64 + (hexdec($substring2)-128));
      $results = substr("00$results", -4); // to fix error with short codes
      $i+=2;
    }
    $ucs2 .= $results;
  }
  return $ucs2;
}

function broadcast_cardboardfish_GSMEncode ($to_encode) {

  static $gsmchar = array (
    "\x40" => "\x00",
    "\xA3" => "\x01",
    "\x24" => "\x02",
    "\xA5" => "\x03",
    "\xE8" => "\x04",
    "\xE9" => "\x05",
    "\xF9" => "\x06",
    "\xEC" => "\x07",
    "\xF2" => "\x08",
    "\xC7" => "\x09",
    "\x0A" => "\x0A",
    "\xD8" => "\x0B",
    "\xF8" => "\x0C",
    "\x0C" => "\x0D",
    "\xC5" => "\x0E",
    "\xE5" => "\x0F",
    "\xEB" => "\x10",
    "\x5F" => "\x11",
    "\xED" => "\x12",
    "\xE2" => "\x13",
    "\xEA" => "\x15",
    "\xE3" => "\x16",
    "\xE4" => "\x18",
    "\xE9" => "\x19",
    "\x12" => "\x1B\x0A",
    "\x5E" => "\x1B\x14",
    "\x7B" => "\x1B\x28",
    "\x7D" => "\x1B\x29",
    "\x5C" => "\x1B\x2F",
    "\x5B" => "\x1B\x3C",
    "\x7E" => "\x1B\x3D",
    "\x5D" => "\x1B\x3E",
    "\x7C" => "\x1B\x40",
    "\xA4" => "\x1B\x65",
    "\xC6" => "\x1C",
    "\xE6" => "\x1D",
    "\xDF" => "\x1E",
    "\xC9" => "\x1F",
    "\x20" => "\x20",
    "\x21" => "\x21",
    "\x22" => "\x22",
    "\x23" => "\x23",
    "\x25" => "\x25",
    "\x26" => "\x26",
    "\x27" => "\x27",
    "\x28" => "\x28",
    "\x29" => "\x29",
    "\x2A" => "\x2A",
    "\x2B" => "\x2B",
    "\x2C" => "\x2C",
    "\x2D" => "\x2D",
    "\x2E" => "\x2E",
    "\x2F" => "\x2F",
    "\x30" => "\x30",
    "\x31" => "\x31",
    "\x32" => "\x32",
    "\x33" => "\x33",
    "\x34" => "\x34",
    "\x35" => "\x35",
    "\x36" => "\x36",
    "\x37" => "\x37",
    "\x38" => "\x38",
    "\x39" => "\x39",
    "\x3A" => "\x3A",
    "\x3B" => "\x3B",
    "\x3C" => "\x3C",
    "\x3D" => "\x3D",
    "\x3E" => "\x3E",
    "\x3F" => "\x3F",
    "\xA1" => "\x40",
    "\x41" => "\x41",
    "\x42" => "\x42",
    "\x43" => "\x43",
    "\x44" => "\x44",
    "\x45" => "\x45",
    "\x46" => "\x46",
    "\x47" => "\x47",
    "\x48" => "\x48",
    "\x49" => "\x49",
    "\x4A" => "\x4A",
    "\x4B" => "\x4B",
    "\x4C" => "\x4C",
    "\x4D" => "\x4D",
    "\x4E" => "\x4E",
    "\x4F" => "\x4F",
    "\x50" => "\x50",
    "\x51" => "\x51",
    "\x52" => "\x52",
    "\x53" => "\x53",
    "\x54" => "\x54",
    "\x55" => "\x55",
    "\x56" => "\x56",
    "\x57" => "\x57",
    "\x58" => "\x58",
    "\x59" => "\x59",
    "\x5A" => "\x5A",
    "\xC4" => "\x5B",
    "\xD6" => "\x5C",
    "\xD1" => "\x5D",
    "\xDC" => "\x5E",
    "\xA7" => "\x5F",
    "\xBF" => "\x60",
    "\x61" => "\x61",
    "\x62" => "\x62",
    "\x63" => "\x63",
    "\x64" => "\x64",
    "\x65" => "\x65",
    "\x66" => "\x66",
    "\x67" => "\x67",
    "\x68" => "\x68",
    "\x69" => "\x69",
    "\x6A" => "\x6A",
    "\x6B" => "\x6B",
    "\x6C" => "\x6C",
    "\x6D" => "\x6D",
    "\x6E" => "\x6E",
    "\x6F" => "\x6F",
    "\x70" => "\x70",
    "\x71" => "\x71",
    "\x72" => "\x72",
    "\x73" => "\x73",
    "\x74" => "\x74",
    "\x75" => "\x75",
    "\x76" => "\x76",
    "\x77" => "\x77",
    "\x78" => "\x78",
    "\x79" => "\x79",
    "\x7A" => "\x7A",
    "\xE4" => "\x7B",
    "\xF6" => "\x7C",
    "\xF1" => "\x7D",
    "\xFC" => "\x7E",
    "\xE0" => "\x7F"
  );

  # using the NO_EMPTY flag eliminates the need for the shift pop correction
  $chars = preg_split("//", $to_encode, -1, PREG_SPLIT_NO_EMPTY);

  $to_return = "";

  foreach ($chars as $char) {
    preg_match("/[A-Za-z0-9!\/#%&\"=\-'<>\?\(\)\*\+\,\.;:]/", $char, $matches);
    if (isset($matches[0])) {
      $to_return .= $char;
    } else {
      if (!isset($gsmchar[$char])) {
        return FALSE; //$to_return .= "\x20";
      } else {
        $to_return .= $gsmchar[$char];
      }
    }
  }
  return $to_return;
}

function broadcast_cardboardfish_includeif($existing, $prefix) {
    if ($existing == "") {
        return "";
    } else {
        return $prefix . $existing;
    }
}

# Plain Text SMS
# Plain SMS with User Reference and delivery receipt request
function example7_1() {
    global $destination, $source, $errstr;
    # Construct an SMS object
    $sms = new SMS();

    # Set the destination address 
    $sms->setDA($destination) or mydie($errstr);

    # Set the source address
    $sms->setSA($source) or mydie($errstr);

    # Set the user reference
    $sms->setUR("AF31C0D") or mydie($errstr);

    # Set delivery receipts to 'on'
    $sms->setDR("1") or mydie ($errstr);

    # Set the message content
    $sms->setMSG("Hello") or mydie ($errstr);

    # Send the message and inspect the responses
    $responses = send_sms_object($sms) or mydie ($errstr);
    echo "Example 7.1 Response:\n";
    foreach ($responses as $response) {
        echo "\t$response\n";
    }
}

# Unicode
# Unicode message.
function example7_7() {
    global $destination, $source, $errstr;

    $sms = new SMS();
    $sms->setDA($destination) or mydie($errstr);
    $sms->setSA($source) or mydie($errstr);
    $sms->setDC("4") or mydie ($errstr);
    $sms->setMSG("00430061007200640042006f00610072006400460069007300680020002d00200054006800650020004e006500780074002000470065006e00650072006100740069006f006e0020006f00660020004d006f00620069006c00650020004d006500730073006100670069006e0067");

    $responses = send_sms_object($sms) or mydie ($errstr);
    echo "Example 7.7 Response:\n";
    foreach ($responses as $response) {
        echo "\t$response\n";
    }
}

# Concatenated SMS
# Long plain message with User Reference and delivery receipt. This
# message is 163 characters long so it would require 2 sms.
function example7_8() {
    global $destination, $source, $errstr;

    $sms = new SMS();
    $sms->setDA($destination) or mydie($errstr);
    $sms->setSA($source) or mydie($errstr);
    $sms->setDR("1") or mydie ($errstr);
    $sms->setMSG("Hi! The train is delayed so please pick me up from London road train station. Let me know if you can make it because if not I will catch a taxi. Speak to you soon.");

    $responses = send_sms_object($sms) or mydie ($errstr);
    echo "Example 7.8 Response:\n";
    foreach ($responses as $response) {
        echo "\t$response\n";
    }
}
