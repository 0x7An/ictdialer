<?php
/******************************************************************
* Copyright Â© 2012 ICT Innovations, All Rights Reserved           *
* License: GNU AGPL V 3.0                                         *
* Developed By: Falak Nawaz                                       *
*             : Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Website : http://www.ictinnovations.com/                        *
* Contact : support@ictinnovations.com, info@ictinnovations.com   *
******************************************************************/

// $Id: broadcast_plivo.module,v 1.0 2011/09/12 17:57:59 ictinnovations Exp $

// Include the PHP Plivo Rest library
require_once "lib/plivohelper.php";


function broadcast_plivo_menu() {
  $items = array();

  $items['admin/broadcast/gateway/plivo'] = array(
    'title'            => 'Plivo Settings',
    'description'      => 'Configure Plivo Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_plivo_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast plivo system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/broadcast/gateway/plivo/setting'] = array(
    'title'            => 'Settings',
    'description'      => 'Configure Plivo Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_plivo_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast plivo system admin'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );

  $items['admin/broadcast/gateway/plivo/test'] = array(
    'title'            => 'Test Call',
    'description'      => 'Testing Call with Plivo',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_plivo_test_form'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast plivo system admin'),
    'type'             => MENU_LOCAL_TASK,
  );
  
  $items['plivo/app_controller/%broadcast_plivo_application/%'] = array(
    'title'            => 'Run Applications',
    'description'      => 'Controls the applications and actions in the IVR',
    'page callback'    => 'broadcast_plivo_app_controller',
    'page arguments'   => array(2, 3),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('gateway'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['plivo/hangup/%broadcast_plivo_application'] = array(
    'title'            => 'Hangup Call',
    'description'      => 'Hangs up current call',
    'page callback'    => 'broadcast_plivo_hangup',
    'page arguments'   => array(2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('gateway'),
    'type'             => MENU_CALLBACK,
  );

  $items['plivo/play_audio/%broadcast_plivo_application'] = array(
    'title'            => 'Play Message',
    'description'      => 'Plays recorded message',
    'page callback'    => 'broadcast_plivo_play_audio',
    'page arguments'   => array(2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('gateway'),
    'type'             => MENU_CALLBACK,
  );

  $items['plivo/tts/%broadcast_plivo_application'] = array(
    'title'            => 'Text to Speech',
    'description'      => 'Plays speech from given text string',
    'page callback'    => 'broadcast_plivo_tts',
    'page arguments'   => array(2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('gateway'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['plivo/getdigit/%broadcast_plivo_application'] = array(
    'title'            => 'Get Digits',
    'description'      => 'Gets digits from user',
    'page callback'    => 'broadcast_plivo_getdigit',
    'page arguments'   => array(2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('gateway'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['plivo/transfer/%broadcast_plivo_application'] = array(
    'title'            => 'Transfer',
    'description'      => 'Transfers call to sip uri',
    'page callback'    => 'broadcast_plivo_transfer',
    'page arguments'   => array(2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('gateway'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['plivo/test_call/%broadcast_plivo_recording'] = array(
    'title'            => 'Play test Message',
    'description'      => 'Plays recorded test message',
    'page callback'    => 'broadcast_plivo_test_call',
    'page arguments'   => array(2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('gateway'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['plivo/send_fax/%'] = array(
    'title'            => 'Send Fax',
    'description'      => 'Send Fax file',
    'page callback'    => 'broadcast_plivo_send_fax',
    'page arguments'   => array(2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('gateway'),
    'type'             => MENU_CALLBACK,
  );
  
  /* Commented: No need of play_menu URL
  $items['plivo/play_menu/%broadcast_plivo_application'] = array(
    'title'            => 'Plays Menu',
    'description'      => 'Based on the input digit, Plays the requested option',
    'page callback'    => 'broadcast_plivo_play_menu',
    'page arguments'   => array(2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('gateway'),
    'type'             => MENU_CALLBACK,
  );*/

  return $items;
}

/**
 * Implementation of hook_permission().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on sms module.
 */
function broadcast_plivo_permission() {
  return array(
    'broadcast plivo system admin' => array('title'=> 'broadcast plivo system admin')
  );
}
/************************************************************************
* Following function is a copy of broadcast_recording_recording_load()  *
* that is available in recording module. Its redefinition here fixes    *
* the issue of user permission with gateway user.                       *
*************************************************************************/
function broadcast_plivo_recording_load($recording_id) {
  $sql    = "SELECT * FROM {broadcast_recording} WHERE recording_id = :recording_id";
  $result = db_query($sql, array(':recording_id'=>$recording_id));
  if ($recording = $result->fetchAssoc()) {
    return $recording;
  }
  else {
    drupal_set_message(t('Specified Recording does not exist! or you have not proper permissions!'), 'error');
    return FALSE;
  }
}

function broadcast_plivo_document_load($document_id) {
  $sql    = "SELECT * FROM {broadcast_document} WHERE document_id = :document_id";
  $result = db_query($sql, array(':document_id'=>$document_id));
  if ($document = $result->fetchAssoc()) {
    return $document;
  }
  else {
    drupal_set_message(t('Specified document does not exist! or you have not proper permissions!'), 'error');
    return FALSE;
  }
}

function broadcast_plivo_extension_load($extension_id) {
  $sql    = "SELECT * FROM {broadcast_extension} WHERE extension_id = :extension_id";
  $result = db_query($sql, array(':extension_id'=>$extension_id));
  if ($extension = $result->fetchAssoc()) {
    return $extension;
  }
  else {
    drupal_set_message(t('Specified extension does not exist! or you have not proper permissions!'), 'error');
    return FALSE;
  }
}

function broadcast_plivo_application_load($app_id) {
  $sql    = "SELECT * FROM {broadcast_campaign_application} WHERE campaign_application_id = :campaign_application_id";
  $result = db_query($sql, array(':campaign_application_id'=>$app_id));
  if ($app = $result->fetchAssoc()) {
    return $app;
  }
  else {
    drupal_set_message(t('Specified Application does not exist! or you have not proper permissions!'), 'error');
    return FALSE;
  }
}

function broadcast_plivo_action_load($app_id){
  $sql = "SELECT * FROM {broadcast_campaign_action} WHERE campaign_application_id = :campaign_application_id";
  $result = db_query($sql, array(':campaign_application_id'=>$app_id));
  $app_actions = array();
  while($row = $result->fetchAssoc()) {
      $app_actions[$row['test_value']] = $row;
  }
  return $app_actions;
}

////////////////////////////////////////////////////////////////////////////
function broadcast_plivo_admin_settings() {
  $form['gateway'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Plivo Gateway Settings')
  );
  
  $form['gateway']['broadcast_drupal_root'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Application Root"),
    '#default_value' => variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php'),
    '#description'   => t('e.g. Drupal application root address (including \'http://\')'),
  );

  $form['gateway']['broadcast_plivo_server'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Plivo Server Address"),
    '#default_value' => variable_get('broadcast_plivo_server', '127.0.0.1'),
    '#description'   => t('Plivo Rest server IP address'),
  );

  $form['gateway']['broadcast_plivo_accountid'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Account ID"),
    '#default_value' => variable_get('broadcast_plivo_accountid', 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'),
    '#description'   => t('username for Plivo Rest API'),
  );

  $form['gateway']['broadcast_plivo_authenticationtoken'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Authentication Token"),
    '#default_value' => variable_get('broadcast_plivo_authenticationtoken', 'YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY'),
    '#description'   => t('password for Plivo Rest API'),
  );
  
  $form['gateway']['broadcast_plivo_port'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Server Port"),
    '#default_value' => variable_get('broadcast_plivo_port', '8088'),
    '#description'   => t('Port number for Plivo Rest API'),
  );

  $form['gateway']['broadcast_plivo_callerid'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Default Outgoing CallerID"),
    '#default_value' => variable_get('broadcast_plivo_callerid', '1111111111'),
    '#description'   => t('Default callerid for outgoing calls'),
  );

  $form['gateway']['broadcast_plivo_provider_trunk'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Provider Trunk"),
    '#default_value' => variable_get('broadcast_plivo_provider_trunk', 'user'),
    '#description'   => t('Name of the Provider Trunk configured in freeswitch that you want to use for outgoing calls.'),
  );

  $form['gateway']['broadcast_plivo_prefix'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Dial Prefix"),
    '#default_value' => variable_get('broadcast_plivo_prefix', ''),
    '#description'   => t('Dial prefix (if any) required by above Provider Trunk.'),
  );

  return system_settings_form($form);
}

/**
 * Build the campaign editing form.
 *
 * @ingroup forms
 * @see broadcast_plivo_test_form_submit()
 */
function broadcast_plivo_test_form($form, &$form_state, $campaign = array()) {

  $form['test'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Testing Plivo Gateway'),
  );

  $form['test']['number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Phone Number'),
    '#required'      => TRUE,
  );

  $form['test']['recording'] = array(
    '#type'          => 'select',
    '#title'         => t('Recording File'),
    '#options'       => broadcast_recording_option(),
  );

  $form['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

function broadcast_plivo_test_form_submit($form, &$form_state) {
  $voice = $form_state['values'];
  broadcast_campaign_voice_test($voice['number'],$voice['recording']);
}

function broadcast_campaign_voice_test($number, $recording_id) {
  echo exec("echo '".print_r($recording_id, true)."' > /tmp/mytest.txt");
  $application_root = variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php');
  $plivo_server     = variable_get('broadcast_plivo_server', '127.0.0.1');
  $plivo_port       = variable_get('broadcast_plivo_port', '8088');
  $plivo_AccountSid = variable_get('broadcast_plivo_accountid', 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
  $plivo_AuthToken  = variable_get('broadcast_plivo_authenticationtoken', 'YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY');
  $caller_id       = variable_get('broadcast_plivo_callerid', '1111111111');
  $provider_trunk = variable_get('broadcast_plivo_provider_trunk', 'user');
  $prefix         = variable_get('broadcast_plivo_prefix', '');
  if(isset($provider_trunk) && $provider_trunk != NULL) {
    if($provider_trunk == 'user') {
      $dial_string = "$provider_trunk/";
    } else {
      $dial_string = "sofia/gateway/$provider_trunk/";
    }
  }
  if(isset($prefix) && $prefix != '') {
    $dial_string = $dial_string . $prefix;
  }
  echo exec("echo trunk=$dial_string >> /tmp/mytest.txt");

  $REST_API_URL = "http://$plivo_server:$plivo_port";
  $ApiVersion = 'v0.1';
  $client = new PlivoRestClient($REST_API_URL, $plivo_AccountSid, $plivo_AuthToken, $ApiVersion);
  $call_params = array(
      'From'            => $caller_id,      # Caller Id
      'To'              => $number,         # User Number to Call
      'Gateways'        => $dial_string,    # Gateway string to try dialing our separated by comma. First in list will be tried first
      'GatewayCodecs'   => "'PCMA,PCMU'",   # Codec string as needed by FS for each gateway separated by comma
      'GatewayTimeouts' => "60",            # Seconds to timeout in string for each gateway separated by comma
      'GatewayRetries'  => "1",             # Retry String for Gateways separated by comma, on how many times each gateway should be retried
      'AnswerUrl'       => "$application_root?q=plivo/test_call/$recording_id",
      'HangupUrl'       => "$application_root/hangup/",     //  unused
      'RingUrl'         => "$application_root/ringing/"     //  unused 
  );
  try {
      $response = $client->call($call_params);
      watchdog("Plivo", "Success: Call sent to $number" , array(), WATCHDOG_INFO);
      watchdog("Plivo", "rec_id: $recording_id" , array(), WATCHDOG_INFO);
  
  } catch (Exception $e) {
      watchdog("Plivo", "Error trace: " .$e->getMessage , array(), WATCHDOG_ERROR);
      exit(0);
    }
}

function broadcast_plivo_deliver($phone , $first_app_id, $parameters = array()) {
  // Settings for Plivo Server and Instantiate a new Plivo Rest Client
  $application_root = variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php');
  $plivo_server     = variable_get('broadcast_plivo_server', '127.0.0.1');
  $plivo_port       = variable_get('broadcast_plivo_port', '8088');
  $plivo_AccountSid = variable_get('broadcast_plivo_accountid', 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
  $plivo_AuthToken  = variable_get('broadcast_plivo_authenticationtoken', 'YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY');
  $REST_API_URL     = "http://$plivo_server:$plivo_port";
  $ApiVersion       = 'v0.1';
  $client = new PlivoRestClient($REST_API_URL, $plivo_AccountSid, $plivo_AuthToken, $ApiVersion);
  
  // we can set a condition here e.g. if(first_app == start || first_app == answer) then do following
  return broadcast_plivo_answer_call($client, $phone, $first_app_id, $parameters);  
}

function broadcast_plivo_answer_call($client, $phone, $first_app_id, $parameters) {
  // First app is start app. Load next app here
  $application_root = variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php');
  $sql    = "SELECT * FROM {broadcast_campaign_action} WHERE campaign_application_id = :campaign_application_id";
  $result = db_query($sql, array(':campaign_application_id'=>$first_app_id));
  if ($app_actions = $result->fetchAssoc()) {
    $next_app_id = $app_actions['action'];
  }
  $log_id = $parameters;
  
  if(module_exists('broadcast_trunk')) {
    $trunk = get_trunk_by_application_id($first_app_id);
    watchdog("Plivo", "trunk name = $trunk[name]" , array(), WATCHDOG_INFO);
    $provider_trunk = $trunk['name'];
    $prefix         = $trunk['prefix'];
    $call_duration  = $trunk['call_duration'];
    $caller_id      = $trunk['caller_id'];
  } else {
    $provider_trunk = variable_get('broadcast_plivo_provider_trunk', 'user');
    $prefix         = variable_get('broadcast_plivo_prefix', '');
    $call_duration  = variable_get('broadcast_call_duration', '300');
    $caller_id      = variable_get('broadcast_plivo_callerid', '1111111111');
  }
  
  if(isset($provider_trunk) && $provider_trunk != NULL) {
    if($provider_trunk == 'user') {
      $dial_string = "$provider_trunk/";
    } else {
      $dial_string = "sofia/gateway/$provider_trunk/";
    }
  }
  if(isset($prefix) && $prefix != '') {
    $dial_string = $dial_string . $prefix;
  }
  echo exec("echo trunk=$dial_string >> /tmp/mytest.txt");
  
  // Define Channel Variable if any
  // and Initiate a new outbound call to $num["phone"] using a HTTP POST
  $extra_dial_string = "bridge_early_media=true,hangup_after_bridge=false";
  $call_params = array(
      'From'              => $caller_id,        # Caller Id
      'To'                => $phone,            # User Number to Call
      'TimeLimit'         => $call_duration,    # Maximum Duration of the call
      'Gateways'          => $dial_string,      # Gateway string to try dialing our separated by comma. First in list will be tried first
      'GatewayCodecs'     => "'PCMA,PCMU'",     # Codec string as needed by FS for each gateway separated by comma
      'GatewayTimeouts'   => "60",              # Seconds to timeout in string for each gateway separated by comma
      'GatewayRetries'    => "1",               # Retry String for Gateways separated by comma, on how many times each gateway should be retried
      'ExtraDialString'   => $extra_dial_string,
      'AnswerUrl'         => "$application_root?q=plivo/app_controller/$first_app_id/$log_id", 
      'HangupUrl'         => "$application_root?q=broadcast/campaign/call_status_update/$log_id",
      'RingUrl'           => "http://127.0.0.1:5000/ringing/"  // unused
  );
  try {
      // Initiate call
      $response = $client->call($call_params);
      watchdog("Plivo", "Success: Call sent to $phone" , array(), WATCHDOG_INFO);
  } catch (Exception $e) {
      watchdog("Plivo", "Error trace: " .$e->getMessage , array(), WATCHDOG_ERROR);
      return FALSE;
  }
  return TRUE;
}

function broadcast_plivo_supported_services() {
  $services = array('voice' => t('Plivo Voice Service'), 'fax' => t('Plivo Fax Service'));

  return $services;
}

/**********************************************************
Functions for Background Tasks                            *
**********************************************************/

// Following function is called from [/ictsms/index.php?q=plivo/app_controller/$app_id/$log_id] as REST request
function broadcast_plivo_app_controller($app, $log_id) {
  watchdog("In app controller", "$app[name]" , array(), WATCHDOG_INFO);
  $sql = "UPDATE broadcast_campaign_log SET status='answered' WHERE campaign_log_id=$log_id";
  $result = db_query($sql, array());
  $app_id = $app['campaign_application_id'];
  $app_actions = broadcast_plivo_action_load($app_id);
  $next_app_id = false;
  switch ($app['name']) {
    case 'play_menu':
      $digit = trim($_REQUEST['Digits']);
      $next_app_id = $app_actions[$digit]['action'];
      break;
    default:
      $default_action = array_pop($app_actions);
      $next_app_id = $default_action['action'];
      break;
  }
  // if invalid input is made, then select default action
  if(!$next_app_id) {
    foreach($app_actions as $action) {
      if($action['is_default'] == 1){
        $next_app_id = $action['action'];
        break;
      }
    }
  }
  $next_app = broadcast_plivo_application_load($next_app_id);
  $function = 'broadcast_plivo_'.$next_app['name'];
  $function($next_app['campaign_application_id'], $log_id);
}

function broadcast_plivo_play_audio($app_id, $log_id) {
  $app = broadcast_plivo_application_load($app_id);
  $recording_dir = variable_get('broadcast_voice_default_directory', '/usr/ictdialer/sites/default/files/broadcast/recording');
  $application_root = variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php');
  
  // get app data
  $rec = unserialize($app['data']);
  $recording = broadcast_plivo_recording_load($rec['recording']);
  $path_recording = "$recording_dir/$recording[name].wav";
  $url_action = "$application_root?q=plivo/app_controller/$app[campaign_application_id]/$log_id";
  $response = '<?xml version="1.0" encoding="UTF-8"?>
          <Response>
          <Play>'.$path_recording.'</Play>
          <Redirect>'.$url_action.'</Redirect>
          </Response>';
  echo $response;
}

function broadcast_plivo_hangup($app_id, $log_id) {
  $app = broadcast_plivo_application_load($app_id);
  // $data is empty for hangup
  $response = '<?xml version="1.0" encoding="UTF-8"?>
              <Response>
              <Hangup />
              </Response>';
  echo $response;
}

function broadcast_plivo_tts($app_id, $log_id) {
  $app = broadcast_plivo_application_load($app_id);
  $application_root = variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php');
  // get app data
  $data = unserialize($app['data']);
  $tts = $data['tts'];
  $url_action = "$application_root?q=plivo/app_controller/$app[campaign_application_id]/$log_id";
  $response = '<?xml version="1.0" encoding="UTF-8"?>
          <Response>
          <Speak language="el" engine="flite">'.$tts.'</Speak>
          <Redirect>'.$url_action.'</Redirect>
          </Response>';
  echo $response;
}

function broadcast_plivo_getdigit($app_id, $log_id) {
  $app = broadcast_plivo_application_load($app_id);
  $application_root = variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php');
  $recording_dir = variable_get('broadcast_voice_default_directory', '/usr/ictdialer/sites/default/files/broadcast/recording');
  // get app data
  $rec = unserialize($app['data']);
  $recording = broadcast_plivo_recording_load($rec['recording']);
  $path_recording = "$recording_dir/$recording[name].wav";
  $response =  '<?xml version="1.0" encoding="UTF-8"?>
          <Response>
              <GetDigits action="'.$application_root.'?q=plivo/app_controller/'.$app['campaign_application_id'].'/'.$log_id.'" method="POST">
                  <Play>'.$path_recording.'</Play>
              </GetDigits>
              <Speak>Input not received. Bye bye!</Speak>
          </Response>';
   echo $response;
}

function broadcast_plivo_play_menu($app_id, $log_id) {
  $app = broadcast_plivo_application_load($app_id);
  /**********************************/
  /* Entry into campaign_log_result */
  $type = 'play_menu';
  $name = trim($_REQUEST['Digits']);
  $data = trim($_REQUEST['Digits']);
  $campaign_id = $app['campaign_id'];
  broadcast_campaign_log_result($type, $name, $data, $app_id, $log_id, $campaign_id);
  /**********************************/
  broadcast_plivo_app_controller($app, $log_id);
}

function broadcast_plivo_record($app_id, $log_id) {
  watchdog("In record", "$app_id" , array(), WATCHDOG_INFO);
  $application_root = variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php');  
  
  $app = broadcast_plivo_application_load($app_id);
  $response =  '<?xml version="1.0" encoding="UTF-8"?>
                <Response>
                <Record action="'.$application_root.'?q=plivo/app_controller/'.$app['campaign_application_id'].'/'.$log_id.'" method="POST" playBeep="true" finishOnKey="*#" maxLength="60"/>
                <Say>I did not hear a recording.  Goodbye.</Say>
                </Response>';
   echo $response;
}

function broadcast_plivo_transfer($app_id, $log_id) {
  watchdog("In transfer", "$app_id" , array(), WATCHDOG_INFO);
  $app = broadcast_plivo_application_load($app_id);
  $application_root = variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php');
  // get app data
  $data = unserialize($app['data']);
  $transfer = broadcast_plivo_extension_load($data['extension']);
  $url_action = "$application_root?q=plivo/app_controller/$app[campaign_application_id]";
  $response = '<?xml version="1.0" encoding="UTF-8"?>
               <Response>
               <Dial>
               <Number gateways="user/" gatewayCodecs="'."'PCMA,PCMU'".'">'.$transfer['name'].'</Number>
               </Dial>
               </Response>';
  echo $response;
}

function broadcast_plivo_send_fax($app_id, $log_id) {
  $app = broadcast_plivo_application_load($app_id);
  $application_root = variable_get('broadcast_app_root', 'http://127.0.0.1/ictdialer/index.php');
  $fax_dir = variable_get('broadcast_fax_default_directory', '/usr/ictdialer/sites/default/files/broadcast/document');
  
  // get app data
  $doc = unserialize($app['data']);
  $document = broadcast_plivo_document_load($doc['document']);
  $path_document = "$fax_dir/$document[name].tif";
  $url_action = "$application_root?q=plivo/app_controller/$app[campaign_application_id]/$log_id";
  $response = '<?xml version="1.0" encoding="UTF-8"?>
          <Response>
          <SendFax>'.$path_document.'</SendFax>
          <Redirect>'.$url_action.'</Redirect>
          </Response>';
  echo $response;
}

function broadcast_plivo_test_call($rec_id) {
  echo exec("echo '".print_r($rec_id, true)."' >> /tmp/mytest.txt");
  watchdog("Test Call", "rec_id: $rec_id" , array(), WATCHDOG_INFO);
  $recording_dir = variable_get('broadcast_voice_default_directory', '/usr/ictdialer/sites/default/files/broadcast/recording');
  //$recording = broadcast_plivo_recording_load($rec_id); // commented because recording is already loaded.
  $recording = $rec_id;
  watchdog("Test Call", "rec_id: $rec_id" , array(), WATCHDOG_INFO);
  $path_recording = "$recording_dir/$recording[name].wav";
  $response = '<?xml version="1.0" encoding="UTF-8"?>
          <Response>
          <Play>'.$path_recording.'</Play>
          </Response>';
  echo $response;
}

function broadcast_plivo_message_prepare($service, $message) {
  //watchdog('plivo gateway', t('@service message prepared'), array('@service' => $service), WATCHDOG_INFO);
  return $message;
}

function broadcast_plivo_load($service) {
  //watchdog('plivo gateway', t('gateway initilized for @service'), array('@service' => $service), WATCHDOG_INFO);
  return TRUE;  
}

function broadcast_plivo_is_ready($service) {
  //watchdog('plivo gateway', t('gateway is ready for @service'), array('@service' => $service), WATCHDOG_INFO);
  return TRUE;
}

/***********************************
*  Function for Campaign Reports   *
************************************/
function broadcast_campaign_log_result($type, $name, $data, $app_id, $log_id, $campaign_id) {
/*watchdog("Campaign Reports", "type: $type" , array(), WATCHDOG_INFO);
  watchdog("Campaign Reports", "name: $name" , array(), WATCHDOG_INFO);
  watchdog("Campaign Reports", "data: $data" , array(), WATCHDOG_INFO);
  watchdog("Campaign Reports", "app_id: $app_id" , array(), WATCHDOG_INFO);
  watchdog("Campaign Reports", "log_id: $log_id" , array(), WATCHDOG_INFO);
  watchdog("Campaign Reports", "campaign_id: $campaign_id" , array(), WATCHDOG_INFO);*/
  $date = time();
  $sql = "INSERT INTO {broadcast_campaign_log_result}(type, name, data, date_created, campaign_application_id, campaign_log_id, campaign_id) VALUES('$type','$name', '$data', $date, $app_id, $log_id, $campaign_id)";
  db_query($sql, array());
  
}


?>
