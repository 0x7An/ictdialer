<?php
/******************************************************************
* Copyright Â© 2012 ICT Innovations, All Rights Reserved           *
* License: GNU AGPL V 3.0                                         *
* Developed By: Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Modified By:  Falak Nawaz                                       *
* Website : http://www.ictinnovations.com/                        *
* Contact : support@ictinnovations.com, info@ictinnovations.com   *
******************************************************************/

// $Id: broadcast_kannel.module,v 1.0 2010/05/02 17:57:59 ictinnovations Exp $

/**
 * Implementation of hook_menu().
 *
 * Defines six menu entries: an SMS page that lists all sms in the module's
 * database table, add and edit/add/delete pages for each sms
 */
 
function broadcast_kannel_menu() {
  $items = array();

  $items['admin/broadcast/gateway/kannel'] = array(
    'title'            => 'Kannel Settings',
    'description'      => 'Configure Kannel Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_kannel_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast kannel system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/broadcast/gateway/kannel/setting'] = array(
    'title'            => 'Settings',
    'description'      => 'Configure Kannel Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_kannel_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast kannel system admin'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );

  $items['admin/broadcast/gateway/kannel/test'] = array(
    'title'            => 'Test SMS',
    'description'      => 'Testing SMS with Kannel',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_kannel_test_form'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast kannel system admin'),
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on sms module.
 */
function broadcast_kannel_permission() {
  return array(
    'broadcast kannel system admin' => array('title'=> 'broadcast kannel system admin')
  );
}

function broadcast_kannel_admin_settings() {
  $form['gateway'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Kannel Gateway Settings')
  );

  $form['gateway']['broadcast_kannel_server'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Server Address"),
    '#default_value' => variable_get('broadcast_kannel_server', '127.0.0.1'),
    '#description'   => t('Kannel server IP address'),
  );

  $form['gateway']['broadcast_kannel_port'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Server Port"),
    '#default_value' => variable_get('broadcast_kannel_port', '13001'),
    '#description'   => t('SMS Box Port for Kannel'),
  );

  $form['gateway']['broadcast_kannel_username'] = array(
    '#type'          => 'textfield',
    '#title'         => t("User Name"),
    '#default_value' => variable_get('broadcast_kannel_username', 'username'),
    '#description'   => t('username for Kannel sms box'),
  );

  $form['gateway']['broadcast_kannel_password'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Password"),
    '#default_value' => variable_get('broadcast_kannel_password', 'password'),
    '#description'   => t('password for Kannel sms box'),
  );

  $form['gateway']['broadcast_kannel_url_sendsms'] = array(
    '#type'          => 'textfield',
    '#title'         => t("SMS Binary"),
    '#default_value' => variable_get('broadcast_kannel_url_sendsms', '/cgi-bin/sendsms'),
    '#description'   => t('Sendsms URL of kannel smsbox'),
  );

  $form['gateway']['broadcast_kannel_path_config'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Configuration File"),
    '#default_value' => variable_get('broadcast_kannel_path_binary', '/etc/kannel.conf'),
    '#description'   => t('Path to kannel configuration file'),
  );

  $form['gateway']['broadcast_kannel_message_size'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Configuration File"),
    '#default_value' => variable_get('broadcast_kannel_message_size', 160),
    '#description'   => t('How many charecter per message'),
  );

  $form['gateway']['broadcast_kannel_source_number'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Source Number"),
    '#default_value' => variable_get('broadcast_kannel_source_number', '1111111111'),
    '#description'   => t('Source Number / Caller ID which will be used for all outgoing messages from kannel'),
  );

  return system_settings_form($form);
}

/**
 * Build the campaign editing form.
 *
 * @ingroup forms
 * @see broadcast_kannel_test_form_submit()
 */
function broadcast_kannel_test_form($form, &$form_state, $campaign = array()) {

  $form['test'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Testing Kannel Gateway'),
  );

  $form['test']['number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Phone Number'),
    '#required'      => TRUE,
  );

  $form['test']['message'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Message'),
    '#required'      => TRUE,
  );

  $form['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

function broadcast_kannel_test_form_submit($form, &$form_state) {
  $sms = $form_state['values'];

  if (!$result = broadcast_kannel_load('sms')) {
    drupal_set_message(t('Unable to load gateway, message failed!'), 'error');
    $form_state['redirect'] = 'admin/broadcast/gateway/kannel/test';
  }
  
  if ($result && broadcast_kannel_deliver_sms($sms['number'], $sms['message'])) {
    drupal_set_message(t('Message sent successfully!'), 'status');
    $form_state['redirect'] = 'admin/broadcast/gateway/kannel/test';
  } else {
    drupal_set_message(t('Unable to send message, failed!'), 'error');
    $form_state['redirect'] = 'admin/broadcast/gateway/kannel/test';
  }
}

function broadcast_kannel_supported_services() {
  $services = array('sms' => t('Kannel SMS Service'));

  return $services;
}


/********************************************************
*             FUNCTION FOR BACKGROUND TASK              *
********************************************************/

/* Load kannel labrary
*****************************/
function broadcast_kannel_load($service) {
  global $kannel_sms;

  return TRUE;
}

function broadcast_kannel_message_prepare($service, $message) {
  // TODO: convert unicode
  return $message;
}

function broadcast_kannel_is_ready($service) {
  // TODO: check server / processor load
  return TRUE;
}

function broadcast_kannel_deliver_sms($phone, $message, $ref_no = '', $parmeters = array()) {
  global $user, $kannel_sms;
  $units = 0;

  global $kn_host, $kn_port, $kn_user, $kn_pass, $kn_path;

  $sms_server   = variable_get('broadcast_kannel_server', '127.0.0.1');
  $sms_port     = variable_get('broadcast_kannel_port', '13001');
  $sms_username = variable_get('broadcast_kannel_username', 'username');
  $sms_password = variable_get('broadcast_kannel_password', 'password');
  $sms_url      = variable_get('broadcast_kannel_url_sendsms', '/cgi-bin/sendsms');
  $sms_from     = variable_get('broadcast_kannel_source_number', '1111111111');
  $sms_size     = variable_get('broadcast_kannel_message_size', 160);

  $ok = false;

  $msg_type = 1; // text, default
  //if ($sms_type=="flash") {
  //  $msg_type = 0; //flash
  //}

  # Set the source address as user phone number if provided otherwise use default address
  if (isset($user->phone) && $user->phone != '') {
  	$sms_from = $user->phone;
  }

  # check if unicode charecter used in message
  # 0 - 7-bit
  # 1 - 8-bit
  # 2 - 16-bit unicode
  $encoding = 1; // GMS
  if (broadcast_kannel_GSMEncode($message) == false) {
  	//$message = broadcast_kannel_utf8toucs2($message);
    $encoding = 2; // Unicode
  }

  $URL = "$sms_url?username=".urlencode($sms_username)."&password=".urlencode($sms_password);
  $URL .= "&from=".urlencode($sms_from)."&to=".urlencode($phone)."&text=".urlencode($message);
  $URL .= "&mclass=".urlencode($msg_type)."&coding=".urlencode($encoding)."&charset=UTF-8";

  /* if ($rv = trim(file_get_contents("$URL"))) {
	// old kannel responsed with Sent.
	// new kannel with the other 2
	if (($rv == "Sent.") || ($rv == "0: Accepted for delivery") || ($rv == "3: Queued for later delivery")) {
	  $ok = true;
    }
  } */

  $error_number = 0;
  $error_description = '';

  $connection = fsockopen($sms_server, $sms_port, $error_number, $error_description, 60);
  if($connection) {
	socket_set_blocking($connection, false);
	fputs($connection, "GET $URL HTTP/1.0\r\n\r\n");
	while (!feof($connection)) 	{
	  $rv = fgets($connection, 128);
	  if (($rv == "Sent.") || ($rv == "0: Accepted for delivery") || ($rv == "3: Queued for later delivery")) {
        $ok = true;
	  }
    }
    fclose ($connection);
  }

  // TODO: get delivery report
  if ($ok === TRUE) {
    return ceil(strlen($message)/$sms_size);    
  } else {
    return FALSE;
  }
}

function broadcast_kannel_utf8toucs2($string) {
  $ucs2 = '';

  $str = bin2hex($string);

  for ($i=0;$i<strlen($str);$i+=2) {
    $substring1 = $str[$i].$str[$i+1];
    $substring2 = $str[$i+2].$str[$i+3];

    if (hexdec($substring1) < 127) {
      $results = "00".$str[$i].$str[$i+1];
    } else {
      $results = dechex((hexdec($substring1)-192)*64 + (hexdec($substring2)-128));
      $results = substr("00$results", -4); // to fix error with short codes
      $i+=2;
    }
    $ucs2 .= $results;
  }
  return $ucs2;
}

function broadcast_kannel_GSMEncode ($to_encode) {

  static $gsmchar = array (
    "\x40" => "\x00",
    "\xA3" => "\x01",
    "\x24" => "\x02",
    "\xA5" => "\x03",
    "\xE8" => "\x04",
    "\xE9" => "\x05",
    "\xF9" => "\x06",
    "\xEC" => "\x07",
    "\xF2" => "\x08",
    "\xC7" => "\x09",
    "\x0A" => "\x0A",
    "\xD8" => "\x0B",
    "\xF8" => "\x0C",
    "\x0C" => "\x0D",
    "\xC5" => "\x0E",
    "\xE5" => "\x0F",
    "\xEB" => "\x10",
    "\x5F" => "\x11",
    "\xED" => "\x12",
    "\xE2" => "\x13",
    "\xEA" => "\x15",
    "\xE3" => "\x16",
    "\xE4" => "\x18",
    "\xE9" => "\x19",
    "\x12" => "\x1B\x0A",
    "\x5E" => "\x1B\x14",
    "\x7B" => "\x1B\x28",
    "\x7D" => "\x1B\x29",
    "\x5C" => "\x1B\x2F",
    "\x5B" => "\x1B\x3C",
    "\x7E" => "\x1B\x3D",
    "\x5D" => "\x1B\x3E",
    "\x7C" => "\x1B\x40",
    "\xA4" => "\x1B\x65",
    "\xC6" => "\x1C",
    "\xE6" => "\x1D",
    "\xDF" => "\x1E",
    "\xC9" => "\x1F",
    "\x20" => "\x20",
    "\x21" => "\x21",
    "\x22" => "\x22",
    "\x23" => "\x23",
    "\x25" => "\x25",
    "\x26" => "\x26",
    "\x27" => "\x27",
    "\x28" => "\x28",
    "\x29" => "\x29",
    "\x2A" => "\x2A",
    "\x2B" => "\x2B",
    "\x2C" => "\x2C",
    "\x2D" => "\x2D",
    "\x2E" => "\x2E",
    "\x2F" => "\x2F",
    "\x30" => "\x30",
    "\x31" => "\x31",
    "\x32" => "\x32",
    "\x33" => "\x33",
    "\x34" => "\x34",
    "\x35" => "\x35",
    "\x36" => "\x36",
    "\x37" => "\x37",
    "\x38" => "\x38",
    "\x39" => "\x39",
    "\x3A" => "\x3A",
    "\x3B" => "\x3B",
    "\x3C" => "\x3C",
    "\x3D" => "\x3D",
    "\x3E" => "\x3E",
    "\x3F" => "\x3F",
    "\xA1" => "\x40",
    "\x41" => "\x41",
    "\x42" => "\x42",
    "\x43" => "\x43",
    "\x44" => "\x44",
    "\x45" => "\x45",
    "\x46" => "\x46",
    "\x47" => "\x47",
    "\x48" => "\x48",
    "\x49" => "\x49",
    "\x4A" => "\x4A",
    "\x4B" => "\x4B",
    "\x4C" => "\x4C",
    "\x4D" => "\x4D",
    "\x4E" => "\x4E",
    "\x4F" => "\x4F",
    "\x50" => "\x50",
    "\x51" => "\x51",
    "\x52" => "\x52",
    "\x53" => "\x53",
    "\x54" => "\x54",
    "\x55" => "\x55",
    "\x56" => "\x56",
    "\x57" => "\x57",
    "\x58" => "\x58",
    "\x59" => "\x59",
    "\x5A" => "\x5A",
    "\xC4" => "\x5B",
    "\xD6" => "\x5C",
    "\xD1" => "\x5D",
    "\xDC" => "\x5E",
    "\xA7" => "\x5F",
    "\xBF" => "\x60",
    "\x61" => "\x61",
    "\x62" => "\x62",
    "\x63" => "\x63",
    "\x64" => "\x64",
    "\x65" => "\x65",
    "\x66" => "\x66",
    "\x67" => "\x67",
    "\x68" => "\x68",
    "\x69" => "\x69",
    "\x6A" => "\x6A",
    "\x6B" => "\x6B",
    "\x6C" => "\x6C",
    "\x6D" => "\x6D",
    "\x6E" => "\x6E",
    "\x6F" => "\x6F",
    "\x70" => "\x70",
    "\x71" => "\x71",
    "\x72" => "\x72",
    "\x73" => "\x73",
    "\x74" => "\x74",
    "\x75" => "\x75",
    "\x76" => "\x76",
    "\x77" => "\x77",
    "\x78" => "\x78",
    "\x79" => "\x79",
    "\x7A" => "\x7A",
    "\xE4" => "\x7B",
    "\xF6" => "\x7C",
    "\xF1" => "\x7D",
    "\xFC" => "\x7E",
    "\xE0" => "\x7F"
  );

  # using the NO_EMPTY flag eliminates the need for the shift pop correction
  $chars = preg_split("//", $to_encode, -1, PREG_SPLIT_NO_EMPTY);

  $to_return = "";

  foreach ($chars as $char) {
    preg_match("/[A-Za-z0-9!\/#%&\"=\-'<>\?\(\)\*\+\,\.;:]/", $char, $matches);
    if (isset($matches[0])) {
      $to_return .= $char;
    } else {
      if (!isset($gsmchar[$char])) {
        return FALSE; //$to_return .= "\x20";
      } else {
        $to_return .= $gsmchar[$char];
      }
    }
  }
  return $to_return;
}
