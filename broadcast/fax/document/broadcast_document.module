<?php
/******************************************************************
* Copyright Â© 2012 ICT Innovations, All Rights Reserved           *
* License: GNU AGPL V 3.0                                         *
* Developed By: Falak Nawaz                                       *
*             : Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Website : http://www.ictinnovations.com/                        *
* Contact : support@ictinnovations.com, info@ictinnovations.com   *
******************************************************************/

// $Id: document.module,v 1.0 2011/12/12 18:08:59 ictinnovations Exp $

/**
 * @file
 * Provides support to add fax document and manage fax documents which can be used
 * with broadcast module.
 */

/**
 * Implementation of hook_menu().
 *
 * Defines menu entries 
 */
function broadcast_document_menu() {
  $items = array();

  $items['broadcast/files'] = array(
    'title'            => 'Manage Files',
    'description'      => 'Manage files for Campaign',
    'page callback'    => 'system_admin_menu_block_page',
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast campaign'),
    'position'         => 'left',
    'weight'           => 0,
    );
    
    $items['broadcast/files/document'] = array(
    'title'            => 'Fax Documents',
    'description'      => 'Manage fax documents for campaigns',
    'page callback'    => 'broadcast_voice_document_list',
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast document'),
    'type'             => MENU_NORMAL_ITEM,
    //'weight'           => -10,
    );

    $items['broadcast/files/document/list'] = array(
    'title'            => 'List',
    'description'      => 'Manage document for campaigns',
    'page callback'    => 'broadcast_voice_document_list',
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast document'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );

  $items['broadcast/files/document/add'] = array(
    'title'            => 'Upload Fax document',
    'description'      => 'Add / Create new Recorings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_document_form'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast document admin'),
    'type'             => MENU_LOCAL_TASK,
  );
  
  $items['broadcast/files/document/%broadcast_document/edit'] = array(
    'title'            => 'Edit document',
    'description'      => 'Edit / Change document',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_document_form', 3),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast document admin'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['broadcast/files/document/%broadcast_document/delete'] = array(
    'title'            => 'Delete document',
    'description'      => 'Delete document',
    'page callback'    => 'broadcast_document_delete',
    'page arguments'   => array(3),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast document admin'),
    'type'             => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_permission().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on document module.
 */
function broadcast_document_permission() {
  return array(
    'broadcast document'              => array('title'=> 'broadcast document'),
    'broadcast document admin'        => array('title'=> 'broadcast document admin'),     
    'broadcast document system admin' => array('title'=> 'broadcast document system admin')
  );
}

/**
 * Page function for document List
 *
 * It will show a list of available documents in form of list
 *
 * @return
 * page html
*/
function broadcast_voice_document_list() {

  $header = array(
    array('data' => t('Document Name'),   'field' => 'name', 'sort' => 'asc'),
    array('data' => t('Type'),            'field' => 'type'),
    array('data' => t('File Name'),       'field' => 'file_name'),
    array('data' => t('Description'),     'field' => 'description'),
    array('data' => t('Operations')),
  );
  $query = CoreDB::db_select('document', 'd')->extend('PagerDefault');
  $query->fields('d', array('document_id', 'name', 'type', 'file_name', 'description'));
  $result = $query->limit(10)         
            ->extend('TableSort')
            ->orderByHeader($header)
            ->execute();
  while ($document = $result->fetchAssoc()) {
    $row_id = $document['document_id']; 
    $rows[$row_id][] = check_plain($document['name']);
    $rows[$row_id][] = check_plain($document['type']);
    $rows[$row_id][] = check_plain($document['file_name']);
    $rows[$row_id][] = check_plain($document['description']);
    $rows[$row_id][] = _broadcast_document_list_links($document);
  }
  if (!isset($rows)) {
    $rows[] = array(array('data' => t('No Fax documents have been added.'), 'colspan' => 5));
  }

  $output = theme('table', array('header'=>$header, 'rows'=>$rows));
  $output .= theme('pager');

  return $output;
}

/**
 * Build the edit and delete links for a single document.
 *
 * @see broadcast_document_list()
 */
 
function _broadcast_document_list_links($document) {
  $links['edit'] = array(
    'title' => t('Edit'),
    'href' => 'broadcast/files/document/' . $document['document_id'] . '/edit',
    'html' => TRUE,
  );
  $links['delete'] = array(
    'title' => t('Delete'),
    'href' => 'broadcast/files/document/' . $document['document_id'] . '/delete',
    'html' => TRUE,
  );
  return theme('links', array('links'=>$links, 'attributes' => array('class' => array('links', 'inline'))));
}


/**
 * Loader function for individual documents.
 *
 * As we have used '%broadcast_document' as a wildcard in our hook_menu()
 *
 * @param $document_id
 *   An int containing the ID of a document.
 * @return
 *   A single document in array format, or FALSE if none matched the incoming ID.
 */
function broadcast_document_load($document_id) {
  global $user;
    $query  = 'SELECT * FROM document WHERE document_id = :document_id AND created_by=:created_by';
    $result = CoreDB::db_query($query, array(':document_id' => $document_id, ':created_by' => $user->uid));
    if ($document = $result->fetchAssoc()) {
      return $document;
    }
    else {
      drupal_set_message(t('Specified document does not exist! or you have not proper permissions!'), 'error');
      return FALSE;
    }
}

/**
 * Build the document editing form.
 *
 * @ingroup forms
 * @see broadcast_document_form_submit()
 */
function broadcast_document_form($form, &$form_state, $document = array()) {
  // It's safe to use on both an empty array, and an incoming array with full or partial data.
  $document += array(
    'name'        => '',
    'type'        => '',
    'file_name'   => '',
    'description' => '',
    'file_upload' => '',
  );
  // If we're editing an existing document, we'll add a value field to the form
  // containing the document's unique ID.
  if (!empty($document['document_id'])) {
    $form['document_id'] = array(
      '#type'        => 'value',
      '#value'       => $document['document_id'],
    );
  }

  $form['document'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Document Information'),
  );

  $form['document']['name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Document Name'),
    '#required'      => TRUE,
    '#default_value' => $document['name'],
  );

  $form['document']['description'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Description'),
    '#default_value' => $document['description'],
  );

  $form['message'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Document'),
  );
  
  // helper field for file upload
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['message']['file_upload'] = array(
    '#type'          => 'file',
    '#title'         => t('Upload File'),
    '#default_value' => $document['file_upload'],
  );
  
  $form['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

function broadcast_document_form_validate($form, &$form_state) {
  $existing_record = 0;
  $document         = $form_state['values'];

  if (isset($document['document_id'])) {
    // we are editing an existing record
    $existing_record = $document['document_id'];
  }

  if ($document['name'] == '') {
    form_set_error('name', t('document name cannot be empty'));
  }
  
  
}

/**
 * Inserts a new document, or updates an existing one.
 *
 */
function broadcast_document_form_submit($form, &$form_state) {
  global $user;
  
  include_once "/usr/ictcore/core/core.php";

  $path = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . "/broadcast/document";
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  $document = $form_state['values'];
  // set source file path
  $validators = array(
    'file_validate_extensions' => array("tif TIF pdf PDF"),
  );
  if($file = file_save_upload('file_upload', $validators)) {

    // Do something with $file here.
    $orgFile = '/tmp/'.$file->filename;
    $size    = $file->filesize;
    // set destination file path
    $fixedFile = "$path/$document[name].tif";
    $document['type'] = 'TIF';
    // initiate a file copy
    exec("cp '$orgFile' '$fixedFile'");
    exec("chmod 666 '$fixedFile'");
    
    $document['path'] = $fixedFile;
    $document['size'] = $size;
    
    if (!isset($document['created'])) {
      $document['created'] = time();
    }

    do_login($user->uid);

    // save the document
    $oDocument = new Document();
    $oDocument->__construct($document['document_id']);
    $oDocument->set('name', $document['name']);
    $oDocument->set('file_name', $orgFile);
    $oDocument->set('type', $document['type']);
    $oDocument->set('description' , $document['description']);
    $oDocument->set('created_by' , $created_by);
    $result = $oDocument->save();
    if ($result) {
      drupal_set_message(t('document saved successfully!'), 'status');
      $form_state['redirect'] = 'broadcast/files/document/list';
    } else {
    drupal_set_message(t('Cannot save document!'), 'error');
    }
  }
}
/**
 * Deletes a document, given its unique ID.
 *
 * @param $document
 *   An array of document containing the ID of a document
 */
function broadcast_document_delete($document) {
  include_once "/usr/ictcore/core/core.php";
  $oDocument = new Document($document['document_id']);
    if($oDocument->delete()){
        drupal_set_message(t('Document deleted successfully!'), 'status');
      } else {
        drupal_set_message(t('Cannot delete specified Document! Document does not exist or you have not proper permissions!'), 'error');
      }
  drupal_goto('broadcast/files/document/list');
}

function broadcast_document_option() {
  $sql = "SELECT * FROM document";
  $sql = broadcast_db_filter($sql, 'document');
  $result = CoreDB::db_query($sql);
  $rows = array();
  while ($document = $result->fetchAssoc()) {
    $row_id = $document['document_id'];
    $rows[$row_id] = check_plain($document['name']);
  }
  if (!isset($rows)) {
    return FALSE;
  }
  return $rows;
}

