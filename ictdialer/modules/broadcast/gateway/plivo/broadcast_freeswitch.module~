<?php
/******************************************************************
* Copyright Â© 2011 ICT Innovations Pakistan All Rights Reserved   *
* Developed By: Falak Nawaz                                       *
*             : Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Website : http://www.ictinnovations.com/                        *
* Mail : info@ictinnovations.com                                  *
******************************************************************/

// $Id: broadcast_freeswitch.module,v 1.0 2011/09/12 17:57:59 ictinnovations Exp $

function broadcast_freeswitch_menu() {
  $items = array();

  $items['admin/broadcast/gateway/freeswitch'] = array(
    'title'            => 'Freeswitch Settings',
    'description'      => 'Configure Freeswitch Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_freeswitch_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast freeswitch system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/broadcast/gateway/freeswitch/setting'] = array(
    'title'            => 'Settings',
    'description'      => 'Configure Freeswitch Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_freeswitch_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast freeswitch system admin'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );

  $items['admin/broadcast/gateway/freeswitch/test'] = array(
    'title'            => 'Test Call',
    'description'      => 'Testing Call with Freeswitch',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_freeswitch_test_form'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast freeswitch system admin'),
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on sms module.
 */
function broadcast_freeswitch_perm() {
  return array(
    'broadcast freeswitch system admin'
  );
}

function broadcast_freeswitch_admin_settings() {
  $form['gateway'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Freeswitch Gateway Settings')
  );

  $form['gateway']['broadcast_freeswitch_server'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Server Address"),
    '#default_value' => variable_get('broadcast_freeswitch_server', '127.0.0.1'),
    '#description'   => t('Freeswitch server IP address'),
  );

  $form['gateway']['broadcast_freeswitch_username'] = array(
    '#type'          => 'textfield',
    '#title'         => t("User Name"),
    '#default_value' => variable_get('broadcast_freeswitch_username', 'myadmin'),
    '#description'   => t('username for Freeswitch'),
  );

  $form['gateway']['broadcast_freeswitch_password'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Password"),
    '#default_value' => variable_get('broadcast_freeswitch_password', 'mysecret'),
    '#description'   => t('password for Freeswitch user'),
  );
  
    $form['gateway']['broadcast_freeswitch_port'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Server Port"),
    '#default_value' => variable_get('broadcast_freeswitch_port', '5038'),
    '#description'   => t('Port number for Freeswitch'),
  );
/*
  $form['gateway']['broadcast_freeswitch_path_config'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Configuration File"),
    '#default_value' => variable_get('broadcast_freeswitch_path_binary', 'system/etc/ib_extensions.conf'),
    '#description'   => t('Path to freeswitch configuration file'),
  );
*/

  return system_settings_form($form);
}

/**
 * Build the campaign editing form.
 *
 * @ingroup forms
 * @see broadcast_kannel_test_form_submit()
 */
function broadcast_freeswitch_test_form(&$form_state, $campaign = array()) {

  $form['test'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Testing Freeswitch Gateway'),
  );

  $form['test']['number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Phone Number'),
    '#required'      => TRUE,
  );

  $form['test']['recording'] = array(
    '#type'          => 'select',
    '#title'         => t('Recording File'),
    '#options'       => broadcast_voice_recording_option(),
  );

  $form['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

function broadcast_freeswitch_test_form_submit($form, &$form_state) {
  $sms = $form_state['values'];

  if (!$result = broadcast_kannel_load('sms')) {
    drupal_set_message(t('Unable to load gateway, message failed!'), 'error');
    $form_state['redirect'] = 'admin/broadcast/gateway/kannel/test';
  }
  
  if ($result && broadcast_kannel_deliver_sms($sms['number'], $sms['message'])) {
    drupal_set_message(t('Message sent successfully!'), 'status');
    $form_state['redirect'] = 'admin/broadcast/gateway/kannel/test';
  } else {
    drupal_set_message(t('Unable to send message, failed!'), 'error');
    $form_state['redirect'] = 'admin/broadcast/gateway/kannel/test';
  }
}

function broadcast_freeswitch_supported_services() {
  $services = array('voice' => t('Freeswitch Voice Service'));

  return $services;
}

///////////////////////////////////////////////////
require_once "lib/AsteriskManager.php";
require_once "lib/AsteriskDoc.php";

global $astManager;
global $astConfig;

// dp = dialplan
global $dp_tagCount;
global $dp_tagLevel;
global $dp_labels;
global $dp_context;
global $dp_extension;
global $dp_priority;
global $dp_aAttrib;

$astManager = new AsteriskManager();
$astConfig  = new AsteriskDoc();

// dp = dialplan
$dp_tagCount  = array();
$dp_tagLevel  = 0;
$dp_labels    = 0;
$dp_context   = '';
$dp_extension = '';
$dp_priority  = 0;
$dp_aAttrib   = array('APP'      => 'NoOp',
                      'DATA'     => '', 
                      'INPUT'    => 'variable1', 
                      'VALUE'    => '',
                      'MESSAGE'  => 'beep',  
                      'LENGTH'   => '0', 
                      'OPTION'   => '', 
                      'ATTEMPTS' => '', 
                      'TIMEOUT'  => '', 
                      'DIGITS'   => '', 
                      'SECONDS'  => '', 
                      'LABEL'    => 'label1'
                     );

// connect freeswitch manager
function pbx_connect() {
    global $conf, $astManager;

    // is the $astManager a valid FreeswitchManager object?
    if (!is_object($astManager) || get_class($astManager) != 'AsteriskManager') {
        $astManager = new AsteriskManager();
    }

    // Are we already connected? first disconnect it.
    if ($astManager->connected()) {
        $astManager->disconnect();
    }

    $config = array(
        'host'     => $conf['freeswitch']['host'],
        'port'     => $conf['freeswitch']['port'],
        'username' => $conf['freeswitch']['user'],
        'password' => $conf['freeswitch']['pass']
    );
    $astManager->setConfig($config);

    try {
        $astManager->connect();
    } catch (FreeswitchManager_Exception $e) {
        // Server unavailable for whatever reason.
        mssgLog('Unable to connect to Freeswitch AMI interface: ' . $e->getMessage(), 'error');
        return false;
    }

    return $astManager;
}

// disconnect freeswitch manager
function pbx_disconnect() {
    global $astManager;

    return $astManager->disconnect();
}

function pbx_createConfig($filename) {
    if (!($AMI = pbx_connect()) || empty($filename)) {
        return false;
    }
    return $AMI->send('CreateConfig', array('Filename' => $filename));
}

function pbx_deleteConfig($filename) {
    global $path_etc;

    $file_path = "$path_etc/freeswitch/$filename";
    return pbx_originate('Local/111@ib_wait', null, null, null, 'System', "rm -rf $file_path");
}

function pbx_getConfig($filename = '', $context = '', $use_cache = true) {
    global $astConfig;

    if (empty($options['filename']) || empty($options['context'])) {
        return false;
    }

    // is the $astConfig a valid FreeswitchDoc object?
    if (!is_object($astConfig) || get_class($astConfig) != 'FreeswitchDoc') {
        $astConfig = new FreeswitchDoc();
    }

    if ($use_cache and isset($astConfig->fileCache[$filename][$context])) {
        return $astConfig->fileCache[$filename][$context];
    }

    if ($AMI = pbx_connect()) {
        $astConfig->fileCache[$filename][$context] = $AMI->loadConfigContext($filename, $context);
        return $astConfig->fileCache[$filename][$context];
    } else {
        return false;
    }
}

function pbx_saveConfig() {
    global $astConfig;

    if (empty($astConfig->fileCache)) {
        return true;
    }

    if (!($AMI = pbx_connect())) {
        return false;
    }

    foreach ($astConfig->fileCache as $filename => $contexts) {
        foreach($contexts as $context => $lines) {
            if ($context != 'general') {
                $AMI->queueConfigUpdate($filename, 'DelCat', $context, NULL, NULL, array(
                    'ignoreResponse' => FreeswitchManager::AMI_DEL_FAIL2
                ));
            }

            if ($lines) {
                if ($context != 'general') {
                    $AMI->queueConfigUpdate($filename, 'NewCat', $context);
                }

                foreach($lines as $lineNum => $line) {
                    $lineParts = explode('=', $line, 2);
                    if (!empty($lineParts) && count($lineParts) == 2) {
                        $AMI->queueConfigUpdate($filename, 'Append', $context, $lineParts[0], $lineParts[1], array(
                            'skippredelete' => TRUE
                        ));
                    }
                }
            }
        }

        try {
            $AMI->commitConfigUpdates();
        } catch(FreeswitchManager_Exception $e) {
            mssgLog("Freeswitch -> Exception during commit for [$context] in $filename: ".$e->getMessage(), 'error');
        }
    }
}

// originate a call
function pbx_originate($channel,
                   $exten=NULL, $context=NULL, $priority=NULL,
                   $application=NULL, $data=NULL,
                   $timeout=NULL, $callerid=NULL, $variable=NULL, $account=NULL, $async=NULL, $actionid=NULL) {

    $parameters = array('Channel' => $channel);

    if ($exten) $parameters['Exten']       = $exten;
    if ($context) $parameters['Context']   = $context;
    if ($priority) $parameters['Priority'] = $priority;

    if ($application) $parameters['Application'] = $application;
    if ($data) $parameters['Data']               = $data;

    if ($timeout) $parameters['Timeout']       = $timeout;
    if ($callerid) $parameters['CallerID']     = $callerid;
    if ($variable) $parameters['Variable']     = $variable;
    if ($account) $parameters['Account']       = $account;
    if (!is_null($async)) $parameters['Async'] = ($async) ? 'true' : 'false';
    if ($actionid) $parameters['ActionID']     = $actionid;

    if ($AMI = pbx_connect()) {
        return $AMI->send('Originate', $parameters);
    } else {
        return false;
    }
}

// execute a command
function pbx_execute_cli($cmd, &$output = '') {
    if ($AMI = pbx_connect()) {
        $output = $AMI->command($cmd);
        return true;
    } else {
        return false;
    }
}

function pbx_reload() {
    pbx_execute_cli("reload");
}

function pbx_conf_empty($filename, $keep = array()) {
    $AMI = pbx_connect();
    $result = $AMI->send('ListCategories', array('filename' => $filename));

    $options = array(
        'SrcFilename'   => $filename,
        'DstFilename'   => $filename,
        'Action-000000' => 'DelCat'
    );
    if (isset($AMI) && is_array($result) && count($result) >= 2) {
        unset($result['Response']);
        foreach ($result as $key => $context) {
            if (in_array($context, $keep)) continue;
            $key = str_replace('Category', 'Cat', $key);
            $options[$key] = $context;
        }
        $result = $AMI->send('UpdateConfig', $options);
    }
    // pbx_saveConfig();
    // pbx_execute_cli('reload');
}

function save_conf_did($did_id = 0) {
    // do nothing
    return true;
}

function save_conf_extension($extension_id = 0) {
    global $conf, $path_etc, $astConfig;

    pbx_conf_empty('ib_voicemail.conf');
    pbx_conf_empty('ib_sip.conf');
    pbx_conf_empty('ib_iax.conf');
    pbx_conf_empty('ib_extensions_users.conf');

    $result     = mysql_query("SELECT e.extension_id, e.name, e.secret, e.settings, e.forwarding, 
                                   e.forward_to, e.forward_user, e.forward_pass, e.forward_exten,
                                   t.technology_value AS forward_tech, t.technology_dialstring, 
                                   e.monitoring, e.sip, e.iax, e.created_by,
                                   u.usr_id, u.username, u.email, u.phone, u.mobile
                               FROM extension e
                                 LEFT JOIN technology t ON
                                   e.forward_tech = t.technology_id
                                 LEFT JOIN usr u ON
                                   e.created_by = u.usr_id
                               WHERE u.active = 1");

    while ($record = mysql_fetch_object($result)) {
        if ($record->sip != 1 && $record->iax != 1 && $record->forwarding == 0) continue;
        $context = 'ib_user_'.$record->usr_id;
        $exten   = $record->name;
        $dialstr = array();

        // create voicemail box for each extension
        $astConfig->setPosition('ib_voicemail.conf', $context);
        $astConfig->update('ib_voicemail.conf', $context, $exten, ">$record->secret,$exten,$record->email,$record->email,attach=yes|saycid=yes|envelope=yes|delete=no");

        if ($record->sip == 1) {
            $astConfig->setPosition('ib_sip.conf', $exten);

            $astConfig->update('ib_sip.conf', $exten, 'type',       'user');
            $astConfig->update('ib_sip.conf', $exten, 'secret',     $record->secret);
            $astConfig->update('ib_sip.conf', $exten, 'host',       'dynamic');
            $astConfig->update('ib_sip.conf', $exten, 'dtmfmode',   'rfc2833');
            $astConfig->update('ib_sip.conf', $exten, 'canreinvite','no');
            $astConfig->update('ib_sip.conf', $exten, 'nat',        'yes');
            $astConfig->update('ib_sip.conf', $exten, 'qualify',    'yes');
            $astConfig->update('ib_sip.conf', $exten, 'permit',     '0.0.0.0/0.0.0.0');
            $astConfig->update('ib_sip.conf', $exten, 'callerid',   $exten);
            $astConfig->update('ib_sip.conf', $exten, 'voicemail',  $exten.'@'.$context);
            $astConfig->update('ib_sip.conf', $exten, 'dial',       'SIP/'.$exten);
            $astConfig->update('ib_sip.conf', $exten, 'accountcode',$record->usr_id);
            $astConfig->update('ib_sip.conf', $exten, 'context',    $context);

            $dialstr[] = "SIP/$exten";
        }
 
        if ($record->iax == 1) {
            $astConfig->setPosition('ib_iax.conf', $exten);

            $astConfig->update('ib_iax.conf', $exten, 'type',       'user');
            $astConfig->update('ib_iax.conf', $exten, 'secret',     $record->secret);
            $astConfig->update('ib_iax.conf', $exten, 'host',       'dynamic');
            $astConfig->update('ib_iax.conf', $exten, 'transfer',   'no');
            $astConfig->update('ib_iax.conf', $exten, 'qualify',    'yes');
            $astConfig->update('ib_iax.conf', $exten, 'permit',     '0.0.0.0/0.0.0.0');
            $astConfig->update('ib_iax.conf', $exten, 'callerid',   $exten);
            $astConfig->update('ib_iax.conf', $exten, 'voicemail',  $exten.'@'.$context);
            $astConfig->update('ib_iax.conf', $exten, 'dial',       'IAX2/'.$exten);
            $astConfig->update('ib_iax.conf', $exten, 'accountcode',$record->usr_id);
            $astConfig->update('ib_iax.conf', $exten, 'context',    $context);

            $dialstr[] = "IAX2/$exten";
        }

        if (count($dialstr) > 0) {
            $dial_string = implode('&', $dialstr);

            $astConfig->setPosition('ib_extensions_users.conf', $context, $exten);
            $astConfig->add("Dial($dial_string)", 1);
        }

        if ($record->forwarding == 1) {
            // remote call center
            if ($record->forward_tech == 'SIP') { 
              $forward_file = 'ib_sip.conf';
            } else if ($record->forward_tech == 'IAX2') { 
              $forward_file = 'ib_iax.conf';
            }

            $astConfig->setPosition($forward_file, "$exten-forward");

            $astConfig->update($forward_file, "$exten-forward", 'type',       'peer');
            $astConfig->update($forward_file, "$exten-forward", 'username',   $record->forward_user);
            $astConfig->update($forward_file, "$exten-forward", 'secret',     $record->forward_pass);
            $astConfig->update($forward_file, "$exten-forward", 'host',       $record->forward_to);
            $astConfig->update($forward_file, "$exten-forward", 'canreinvite','no');
            $astConfig->update($forward_file, "$exten-forward", 'nat',        'yes');
            $astConfig->update($forward_file, "$exten-forward", 'qualify',    'yes');
            $astConfig->update($forward_file, "$exten-forward", 'accountcode',$record->usr_id);
            $astConfig->update($forward_file, "$exten-forward", 'context',    $context);

            $dial_string = fill_dialstring($record->technology_dialstring, $record->forward_exten, "$exten-forward");

            $astConfig->setPosition('ib_extensions_users.conf', $context, $exten);
            $astConfig->add("Dial($dial_string)");
        }
        $astConfig->setPosition('ib_extensions_users.conf', $context, $exten);
        $astConfig->add("Voicemail($exten@$context)");
    }

    pbx_saveConfig();
    pbx_execute_cli('reload');
}

function save_conf_trunk($trunk_id = 0) {
    global $conf, $path_etc, $astConfig;

    $query  = "SELECT technology_id FROM technology";
    $techRs = mysql_query($query);

    while ($tech = mysql_fetch_object($techRs)) {
        $technology_id = $tech->technology_id;

        $result      = mysql_query("SELECT technology_value, file_name FROM technology WHERE technology_id=$technology_id limit 1");
        $technology  = mysql_fetch_object($result);
        $curFilename = 'ib_trunk_'.$technology->file_name;
        $curRegfile  = $path_etc.'/freeswitch/ib_registration_'.$technology->file_name;

        pbx_conf_empty($curFilename);
        pbx_originate('Local/111@ib_wait', null, null, null, 'System', "echo '[general](+)' > $curRegfile");

        $config   = '';
        $register = '';
        $trunkRs  = mysql_query("SELECT * FROM trunk WHERE active=1 AND technology_id=$technology_id");

        while ($record = mysql_fetch_object($trunkRs)) {
            if (!empty($record->register)) {
                pbx_originate('Local/111@ib_wait', null, null, null, 'System', "echo 'register=>$record->register' >> $curRegfile");
            }

            $astConfig->setPosition($curFilename, $record->name);

            switch ($record->type) {
              case 1: // outbound
                $astConfig->update($curFilename, $record->name, 'type', 'peer');
                break;
              case 2: // inbound
                $astConfig->update($curFilename, $record->name, 'type', 'user');
                $astConfig->update($curFilename, $record->name, 'context', 'ib_did');
                break;
              case 3: // both
                $astConfig->update($curFilename, $record->name, 'type', 'friend');
                $astConfig->update($curFilename, $record->name, 'context', 'ib_did');
                break;
            }

            $customSettings = explode("\n", $record->settings);

            // as they are already written by above block
            unset($customSettings['type']); 
            unset($customSettings['context']);

            foreach ($customSettings as $customSetting) {
                $lineParts = explode('=', $customSetting, 2);
                if (is_array($lineParts) && count($lineParts) == 2 && !empty($lineParts[1])) {
                    $astConfig->update($curFilename, $record->name, $lineParts[0], $lineParts[1]);
                }
            }
        }
    }

    pbx_saveConfig();
    pbx_execute_cli('reload'); 
}

function save_conf_musiconhold($musiconhold_id) {
    global $conf, $path_etc;

    pbx_conf_empty('ib_musiconhold.conf');

    $query = "SELECT * FROM musiconhold";
    $result = mysql_query($query);

    while ($moh = mysql_fetch_object($result)) {
        $musiconhold_id = $moh->musiconhold_id;

        $astConfig->setPosition('ib_musiconhold.conf', $moh->name);
        
        $astConfig->update('ib_musiconhold.conf', $moh->name, 'mode',      'files');
        $astConfig->update('ib_musiconhold.conf', $moh->name, 'random',    'no');
        $astConfig->update('ib_musiconhold.conf', $moh->name, 'directory', "/var/lib/freeswitch/moh/ictbroadcast/$moh->name");
    }

    // Write all the configuration in file and reload freeswitch configuration
    pbx_saveConfig();
    pbx_execute_cli('reload'); 
}

function save_conf_queue($queue_id) {
    global $conf, $path_etc;

    $queue_config = '';
    $musiconhold  = '';
    $ext_queues   = '[ext-queues-custom]';
    $from_queues  = '[from-queue-custom]';

    $result     = mysql_query("SELECT * FROM queue");

    while ($record = mysql_fetch_object($result)) {
        $queue = $record->queue_name;

        $queue_config .= "
[$queue]
announce-frequency=0
announce-holdtime=no
announce-position=no
autofill=no
eventmemberstatus=no
eventwhencalled=no
joinempty=yes
leavewhenempty=no
maxlen=0
monitor-type=mixmonitor
monitor-format=wav
music=mho$queue
periodic-announce-frequency=0
queue-callswaiting=silence/1
queue-thereare=silence/1
queue-youarenext=silence/1
retry=5
ringinuse=yes
strategy=ringall
timeout=15
weight=0
wrapuptime=0
";

        $ext_queues   .= "
exten => $queue,1,Macro(user-callerid,)
exten => $queue,n,Answer
exten => $queue,n,Set(__BLKVM_OVERRIDE=BLKVM/\${EXTEN}/\${CHANNEL})
exten => $queue,n,Set(__BLKVM_BASE=\${EXTEN})
exten => $queue,n,Set(DB(\${BLKVM_OVERRIDE})=TRUE)
exten => $queue,n,ExecIf($[\"\${REGEX(\"(M[(]auto-blkvm[)])\" \${DIAL_OPTIONS})}\" != \"1\"]?Set(_DIAL_OPTIONS=\${DIAL_OPTIONS}M(auto-blkvm)))
exten => $queue,n,Set(__NODEST=\${EXTEN})
exten => $queue,n,Set(MONITOR_FILENAME=/var/spool/freeswitch/monitor/q\${EXTEN}-\${STRFTIME(\${EPOCH},,%Y%m%d-%H%M%S)}-\${UNIQUEID})
exten => $queue,n,Set(__MOHCLASS=default)
exten => $queue,n,Queue($queue,t,,)
exten => $queue,n,Noop(Deleting: \${BLKVM_OVERRIDE} \${DB_DELETE(\${BLKVM_OVERRIDE})})
exten => $queue,n,Set(__NODEST=)
exten => $queue,n,Goto()
exten => $queue*,1,Macro(agent-add,$queue,$record->secret)
exten => $queue**,1,Macro(agent-del,$queue)
";
        $retval = mysql_query("SELECT * FROM extension RIGHT JOIN queue_extension ON
                                   extension.extension_id = queue.extension_id
                               WHERE queue.queue_id=$queue");

        while ($rsExtension = mysql_fetch_object($retval)) {
            $extension = $rsExtension->name;

            $queue_config .= "member=Local/$extension@from-queue/n,0\n";

            $ext_queues .= "
exten => *45$extension*$queue,1,Set(QUEUENO=$queue)
exten => *45$extension*$queue,n,Goto(app-queue-toggle,*45,1)
exten => *45$extension*$queue,hint,Custom:QUEUE$extension*$queue            
";
        }

        $from_queues .= "exten => $queue,1,Goto(from-internal,\${QAGENT},1)\n";
    }

    if ($queue_config != '' ) {
        $file_path = $path_etc.'/freeswitch/ib_queues.conf';
        file_put_contents($file_path, $queue_config);
    }
    if ($ext_queues != '' || $from_queues != '') {
        $file_path = $path_etc.'/freeswitch/ib_extensions_queues.conf';
        file_put_contents($file_path, "$ext_queues\n$from_queues");
    }
    pbx_execute_cli('reload');
}

function ext_getDialstring($phone, $user, $secret, $tech, $host) {
    // get dial string template and fill it with available options
    $query      = "SELECT technology_dialstring from technology
                   WHERE technology_id=$tech";
    $result     = mysql_query($query);
    $technology = mysql_fetch_assoc($result);
    $tech       = $technology['technology_dialstring'];

    $dialstring = fill_dialstring($tech, $phone, $host, $user, $secret);
    return $dialstring;
}


/*##
    Delete dialplan from Freeswitch
##*/
function pbx_delete_campaign($context) {
  $dp_context = $context;
  $dp_file    = "ib_campaign.d/$dp_context.conf";
  pbx_deleteConfig($dp_file);
}

/*##
    Write dialplan in Freeswitch
##*/
function pbx_save_campaign($context, $dialplan) {
    global $astConfig, $dp_tagCount, $dp_labels, $dp_context, $dp_extension, $dp_priority;

    $astManager = pbx_connect();

    if ($astManager) {
        $dp_tagCount[0] = 0;
        $dp_priority    = 0;
        $dp_extension   = '_X.';
        $dp_context     = $context;
        $dp_file        = "ib_campaign.d/$dp_context.conf";

        pbx_createConfig($dp_file);
        pbx_conf_empty($dp_file);

        $astConfig->setPosition($dp_file, $dp_context, $dp_extension);
        $astConfig->add('Answer()', 1);
        $astConfig->add('Set(_call_status=answered)', 2);
        $astConfig->add('Macro(call_answered,${spool_id})', 3);

        $dp_tagCount[1] = 3;

        // Parse the voiceXML and write freeswitch dialplan
        $parser = xml_parser_create();
        xml_set_element_handler($parser, "start_handler", "end_handler");
        xml_parse($parser, "<dialplan>".$dialplan."</dialplan>", TRUE);
        xml_parser_free($parser);

        $astConfig->setPosition($dp_file, $dp_context, 'h');
        $astConfig->add('Macro(call_completed,${spool_id},${UNIQUEID},${CDR(billsec)})', 1);
        $astConfig->add('Hangup()', 2);

        pbx_saveConfig();
        pbx_execute_cli('dialplan reload');

        return TRUE;
    }
    return FALSE;
}

/*##
   XML Dialplan Parser
##*/
function start_handler($p, $el, $attrs) {
    global $dp_tagCount, $dp_tagLevel, $dp_priority, $dp_labels, $dp_aAttrib;

    $messageFile='';    

    $app='';
    $data='';
    $basePriority=0;
    
    // Every "IF" in "XML Input" will increase Level by One.
    $dp_tagLevel++;
    if (!isset($dp_tagCount[$dp_tagLevel]) || $dp_tagLevel != 1) {
        $dp_tagCount[$dp_tagLevel] = 0;
    }
    $curLevel = $dp_tagLevel-1;
    $dp_tagCount[$curLevel]++;

    // If tag is not "dialplan"
    if ($curLevel > 0) {
        
        // GET ALL ATTRIBUTES FROM XML TAG
        $dp_aAttrib = array(
            'APP'      => 'NoOp',
            'DATA'     => '', 
            'INPUT'    => 'variable1', 
            'VALUE'    => '',
            'MESSAGE'  => 'beep',  
            'LENGTH'   => '0', 
            'OPTION'   => '', 
            'ATTEMPTS' => '', 
            'TIMEOUT'  => '', 
            'DIGITS'   => '', 
            'SECONDS'  => '', 
            'LABEL'    => 'label1'
        );
        foreach ($attrs as $key => $value) {
            $dp_aAttrib[$key] = $value;
        }

        // Make Higher priority for commands for every "IF" block
        if ($curLevel > 1) {
            $basePriority = (pow(100, ($curLevel-1)) * $dp_tagCount[$curLevel-1]);
        }else{
            $basePriority = 0;
        }
        $dp_priority = $basePriority + $dp_tagCount[$curLevel];

        ## Process Dialplan commands
        if ($el == 'CMD') {
            $app = $dp_aAttrib['APP'];
            $data = $dp_aAttrib['DATA'];

        } else if ($el == 'IF') {       
            $app = 'GosubIf';
            $ifPriority = (pow(100, $curLevel) * $dp_tagCount[$curLevel])+1;
            $data = '$["${'.$dp_aAttrib['INPUT'].'}" = "'.$dp_aAttrib['VALUE'].'"]?'.$ifPriority;

        } else if ($el == 'READ') {
            $app = 'Read';
            $messageFile = get_messagefile($dp_aAttrib['MESSAGE']);  // Load Recording
            $data = $dp_aAttrib['INPUT'].','.$messageFile.','.$dp_aAttrib['LENGTH'].','.$dp_aAttrib['OPTION'].
                            ','.$dp_aAttrib['ATTEMPTS'].','.$dp_aAttrib['TIMEOUT'];
            add_dialplan($app, $data);
            
            // Add Set variable Command in Freeswitch Dialplan
            $dp_tagCount[$curLevel]++;
            $dp_priority++;
            $app = 'Set';
            $data = 'dtmf_data=${dtmf_data}'.$dp_aAttrib['INPUT'].'_${'.$dp_aAttrib['INPUT'].'}:';

        } else if ($el == 'SENDDTMF') {
            $app ='SendDTMF';
            $data = $dp_aAttrib['DIGITS'];

        } else if ($el == 'WAIT') {
            $app = 'Wait';
            $data = $dp_aAttrib['SECONDS'];

        } else if ($el == 'PLAYBACK') {
            $app = 'Playback';
            $messageFile = get_messagefile($dp_aAttrib['MESSAGE']); // Load Recording
            $data = $messageFile;

        } else if ($el == 'LABEL') {
            $curLabel = $dp_aAttrib['LABEL'];
            $dp_labels[$curLabel] = $dp_priority;
            $app  = 'NoOp';
            $data = "Lebel priority saved for: $curLabel";

        } else if ($el == 'GOTO') {
            $app  = 'Goto';
            $curLabel = $dp_aAttrib['LABEL'];
            $data = $dp_labels[$curLabel];

        } else if ($el == 'LOOP') {
            $loopPriority = (pow(100, $curLevel) * $dp_tagCount[$curLevel])+1;
            $app  = 'GoSub';
            $data = $loopPriority;
            $curLabel = $dp_aAttrib['LEBEL'];
            $dp_labels[$curLabel] = $loopPriority;

        } else if ($el == 'EXITLOOP') {
            $app  = 'Return';
            $data = '';
            
        } else if ($el == 'HANGUP') {
            $app  = 'Hangup';
            $data = '';
        }
        add_dialplan($app, $data);
    }
}  // End start_handler

/*##
   XML Dialplan Parser End Handler
##*/
function end_handler($p, $el) {
    global $dp_tagCount, $dp_tagLevel, $dp_priority, $dp_labels, $dp_aAttrib;

    $dp_tagCount[$dp_tagLevel] = 0;
    $dp_tagLevel--;
       
    // If end of "If" tag then add a return.
    if ($el == 'IF') {
        $dp_priority++;
        add_dialplan('Return','');

    } else if ($el == 'LOOP') {
        $dp_priority++;
        $curLabel = $dp_aAttrib['LEBEL'];
        add_dialplan('Goto', $dp_labels[$curLabel]);
    }
}  // End end_handler

/*##
   Add Commands to Freeswitch Dialplan
##*/
function add_dialplan($app, $data) {
    global $astManager, $astConfig, $dp_context, $dp_extension, $dp_priority;
    if ((strpos('(', $app) !== false) || $data == '') {
        $command = $app;
    } else {
        $command = "$app($data)";
    }
    $astConfig->add($command, $dp_priority);
}

/*##
   Get file from database save it freeswitch sounds/ictbroadcast directory
   and return the path of sound file
##*/
function get_messagefile($fileId) {

    if ($fileId == 'none' || $fileId == '') {
        return '';
    }
    $SQL = "SELECT recording_id, name, type, data FROM recording WHERE recording_id = $fileId";
    $recording = mysql_query($SQL);

    if (mysql_num_rows($recording)!=0) {
        $row = mysql_fetch_assoc($recording);
        return "ictbroadcast/".$row['name'];
    } else {
        return "beep";
    }
}

function fill_dialstring($dialstring, $phone = null, $host = null, $user = null, $pass = null) {
  if (!isset($phone)) {
    return false;
  } else if (!isset($host) || empty($host)) {
    $keys = array('%phone', '@%host', '%user', ':%pass');
    $vals = array($phone, '', '', '');
  } else if (!isset($user) || empty($user)) {
    $keys = array('%phone', '%host', '%user', ':%pass');
    $vals = array($phone, $host, '', '');
  } else if (!isset($pass) || empty($pass)) {
    $keys = array('%phone', '%host', '%user', ':%pass');
    $vals = array($phone, $host, $user, '');
  } else {
    $keys = array('%phone', '%host', '%user', '%pass');
    $vals = array($phone, $host, $user, $pass);
  }
  
  return str_replace($keys, $vals, $dialstring);
}

function check_gateway_load() {
    global $conf;
    $output = '';

    pbx_execute_cli('core show channels', $output);

    $result         = explode("\n", $output['data']);
    for ($i = 0; $i < 3; $i++) {
        $extra_line = array_pop($result);
        // if not white space line then exit from loop
        if (strpos($extra_line, 'calls processed') !== false) break;
    }
    $total_call     = (int)$extra_line;
    $active_call    = (int)array_pop($result);
    $active_channel = (int)array_pop($result);

    $free_call = $conf['freeswitch']['capacity'] - $active_channel;

    if ($free_call > 0) {
        return $free_call;
    } else {
        return false;
    }
}
?>
