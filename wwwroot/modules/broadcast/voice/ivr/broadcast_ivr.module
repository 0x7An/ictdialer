<?php
/******************************************************************
* Copyright Â© 2009 ICT Innovations.                               *
* Developed By: Falak Nawaz                                       *
*             : Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Website : http://www.ictinnovations.com/                        *
* Mail : info@ictinnovations.com                                  *
******************************************************************/

// $Id: broadcast_ivr.module,v 1.0 2011/11/23 11:43:59 ictinnovations Exp $

/**
 * @file
 * Provides support to add and manage IVRs which can be used
 * with broadcast module.
 */

/**
 * Implementation of hook_menu().
 *
 * Defines menu entries 
 */
function broadcast_ivr_menu() {
  $items = array();

  $items['broadcast/files'] = array(
    'title'            => 'Manage Files',
    'description'      => 'Manage files for Campaign',
    'page callback'    => 'system_admin_menu_block_page',
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast campaign'),
    'position'         => 'left',
    'weight'           => 0,
    );
    
    $items['broadcast/files/ivr'] = array(
    'title'            => 'IVRs',
    'description'      => 'Manage IVRs for campaigns',
    'page callback'    => 'broadcast_voice_ivr_list',
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast ivr'),
    'type'             => MENU_NORMAL_ITEM,
    //'weight'           => -10,
    );

    $items['broadcast/files/ivr/list'] = array(
    'title'            => 'List',
    'description'      => 'Manage IVRs for campaigns',
    'page callback'    => 'broadcast_voice_ivr_list',
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast ivr'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );

  $items['broadcast/files/ivr/add'] = array(
    'title'            => 'Create New IVR',
    'description'      => 'Create new IVR',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_ivr_form'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast ivr admin'),
    'type'             => MENU_LOCAL_TASK,
  );
  
  $items['broadcast/files/ivr/%broadcast_ivr/edit'] = array(
    'title'            => 'Edit IVR',
    'description'      => 'Edit / Change IVR',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_ivr_form', 3),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast ivr admin'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['broadcast/files/ivr/%broadcast_ivr/delete'] = array(
    'title'            => 'Delete IVR',
    'description'      => 'Delete IVR',
    'page callback'    => 'broadcast_ivr_delete',
    'page arguments'   => array(3),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast ivr admin'),
    'type'             => MENU_CALLBACK,
  );
  /*
  $items['admin/broadcast/ivr'] = array(
    'title'            => 'IVR Settings',
    'description'      => 'Configure IVR Broadcasting behavior',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_ivr_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast ivr system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );
  */
  
  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on ivr module.
 */
function broadcast_ivr_perm() {
  return array(
    'broadcast ivr',
    'broadcast ivr admin',
    'broadcast ivr group',
    'broadcast ivr group admin',
    'broadcast ivr system admin'
  );
}

/**
 * Page function for ivr List
 *
 * It will show a list of available ivrs in form of list
 *
 * @return
 * page html
*/
function broadcast_voice_ivr_list() {

  $header = array(
    array('data' => t('IVR Name'),  'field' => 'name', 'sort' => 'asc'),
    array('data' => t('Description'),     'field' => 'description'),
    array('data' => t('Operations')),
  );

  $query = db_select('broadcast_ivr', 'i')->extend('PagerDefault');
  $query->fields('i', array('ivr_id', 'name', 'description'));
  $query = broadcast_select_filter($query);
  $result = $query->limit(10)         
            ->extend('TableSort')
            ->orderByHeader($header)
            ->execute();

  while ($ivr = $result->fetchAssoc()) {
    $row_id = $ivr['ivr_id'];
    $rows[$row_id][] = check_plain($ivr['name']);
    $rows[$row_id][] = check_plain($ivr['description']);
    $rows[$row_id][] = _broadcast_ivr_list_links($ivr);
  }
  if (!isset($rows)) {
    $rows[] = array(array('data' => t('No ivrs have been added.'), 'colspan' => 5));
  }

  $output = theme('table', array('header'=>$header, 'rows'=>$rows));
  $output .= theme('pager');

  return $output;
}

/**
 * Build the edit and delete links for a single ivr.
 *
 * @see broadcast_ivr_list()
 */
 
function _broadcast_ivr_list_links($ivr) {
  $links['edit'] = array(
    'title' => t('Edit'),
    'href' => 'broadcast/files/ivr/' . $ivr['ivr_id'] . '/edit',
    'html' => TRUE,
  );
  $links['delete'] = array(
    'title' => t('Delete'),
    'href' => 'broadcast/files/ivr/' . $ivr['ivr_id'] . '/delete',
    'html' => TRUE,
  );
  return theme('links', array('links'=>$links, 'attributes' => array('class' => array('links', 'inline'))));
}


/**
 * Loader function for individual ivrs.
 *
 * As we have used '%broadcast_ivr' as a wildcard in our hook_menu()
 *
 * @param $ivr_id
 *   An int containing the ID of a ivr.
 * @return
 *   A single ivr in array format, or FALSE if none matched the incoming ID.
 */
function broadcast_ivr_load($ivr_id) {
  $sql    = "SELECT * FROM {broadcast_ivr} WHERE ivr_id = :ivr_id";
  $sql    = broadcast_db_filter($sql);
  $result = db_query($sql, array(':ivr_id'=>$ivr_id));
  if ($ivr = $result->fetchAssoc()) {
    return $ivr;
  }
  else {
    drupal_set_message(t('Specified IVR does not exist! or you have not proper permissions!'), 'error');
    return FALSE;
  }
}

/**
 * Build the ivr editing form.
 *
 * @ingroup forms
 * @see broadcast_ivr_form_submit()
 */
function broadcast_ivr_form($form, &$form_state, $ivr = array()) {
  // It's safe to use on both an empty array, and an incoming array with full or partial data.
  $ivr += array(
    'name'    => '',
    'description'     => '',
    'type'       => '',
    'path'      => '',
    'length'       => '',
    'data'      => '',
    'app_id' => '',
    'recording_id' => '',
    'tts' => '',
    'extension_id' => '',
    'getdigit_recording_id' => '',
    
  );
  
  drupal_add_js(drupal_get_path('module', 'broadcast_ivr') .'/lib/raphael.js'); 
  drupal_add_js(drupal_get_path('module', 'broadcast_ivr') .'/lib/jquery.js');
  drupal_add_js(drupal_get_path('module', 'broadcast_ivr') .'/lib/jquery-ui-1.8.16.js');
  drupal_add_js(drupal_get_path('module', 'broadcast_ivr') .'/lib/ui/jquery.ui.core.js');
  drupal_add_js(drupal_get_path('module', 'broadcast_ivr') .'/lib/ui/jquery.ui.widget.js');
  drupal_add_js(drupal_get_path('module', 'broadcast_ivr') .'/lib/ui/jquery.ui.tabs.js');
  drupal_add_js(drupal_get_path('module', 'broadcast_ivr') .'/lib/IVRDesigner.js');
  drupal_add_js(drupal_get_path('module', 'broadcast_ivr') .'/lib/IVRDesigner_functions.js');
  
  $onchange  = 'Drupal.behaviors.broadcast_ivr = {
                  attach: function(){
                            init();
                            $("form#broadcast-ivr-form input#edit-submit").click(function() { serializeArray();});
                          }
                }';

  if(!empty($ivr['data'])) {
    $onchange = 'Drupal.behaviors.broadcast_ivr = {
                  attach: function(){
                            init();
                            ivr_load_data();
                            $("form#broadcast-ivr-form input#edit-submit").click(function() { serializeArray(); });
                          }
                  }';
  }
  
  drupal_add_js($onchange, array('type'=>'inline','scope'=>'header'));
  drupal_add_css(drupal_get_path('module', 'broadcast_ivr') .'/lib/ivr.css');
  
  
  // If we're editing an existing ivr, we'll add a value field to the form
  // containing the ivr's unique ID.
  if (!empty($ivr['ivr_id'])) {
    $form['ivr_id'] = array(
      '#type'        => 'value',
      '#value'       => $ivr['ivr_id'],
    );
  }
  
  $form['app_id'] = array(
      '#type'        => 'hidden',
      '#value'       => $ivr['app_id'],
  );
  
  $form['ivr'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('IVR'),
  );

  $form['ivr']['name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('ivr Name'),
    '#required'      => TRUE,
    '#default_value' => $ivr['name'],
  );

  $form['ivr']['data'] = array(
    '#type'          => 'textarea',
    '#attributes'    => array('class' => array('inside'), 'style' => array('display:none;')),
    '#default_value' => $ivr['data']
  );
  
  $module_path = drupal_get_path('module', 'broadcast_ivr');
  $form['ivr']['designer'] = array(
    '#type'          => 'markup',
    '#title'         => 'Designer',
    '#markup'        => '
        <div id="contain" >
        <div id="ivrtoolbar" >
        <table style="border-style: none; margin-top: 0px;">
        <tr>
        <th colspan=2>
        Applications
        </th>
        </tr>
        <tr>
        <td><div id="answer-icon" class="draggable"><img src="'.$module_path.'/images/small/answer.png" class="tool" title="Call Answer" /></div></td>
        <td><div id="hangup-icon" class="draggable" "><img src="'.$module_path.'/images/small/hangup.png" class="tool" title="Call Hangup"/></div></td>
        </tr>
        <tr>
        <td><div id="getdigit-icon" class="draggable" ><img src="'.$module_path.'/images/small/getdigits.png" class="tool" title="Get Digit" /></div></td>        
        <td><div id="play_audio-icon" class="draggable" ><img src="'.$module_path.'/images/small/play_audio.png" class="tool" title="Play Audio" /></div></td>
        </tr>
        <tr>
        <td><div id="transfer-icon" class="draggable" ><img src="'.$module_path.'/images/small/transfer.png" class="tool" title="Call Transfer" /></div></td>
        <td><div id="record-icon" class="draggable" ><img src="'.$module_path.'/images/small/recording.png" class="tool" title="Call Record" /></div></td>
        </tr>
        <tr>
        <td><div id="play_menu-icon" class="draggable"><img src="'.$module_path.'/images/small/options.png" class="tool" title="Options Menu" /></div></td>
        <td><div id="amd-icon" class="draggable"><img src="'.$module_path.'/images/small/amd.png" class="tool" title="Answering Machine Detection (AMD)" /></div></td>
        </tr>
        <tr>
        <td><div id="dnc-icon" class="draggable"><img src="'.$module_path.'/images/small/dnc.png" class="tool" title="Do Not Call (DNC)" /></div></td>
        <td><div id="tts-icon" class="draggable"><img src="'.$module_path.'/images/small/tts.png" class="tool" title="Play text-to-speech (TTS)" /></div></td>
        </tr>
        </table>
        </div>
        <div id="holder" style=" overflow:auto">
         <img id="start-image" src="'.$module_path.'/images/large/start.png" hidden="true" width="100" height="100" />         
         <img id="answer-image" src="'.$module_path.'/images/large/answer.png" hidden="true" width="100" height="100" />
         <img id="hangup-image" src="'.$module_path.'/images/large/hangup.png" hidden="true" width="100" height="100" />
         <img id="getdigit-image" src="'.$module_path.'/images/large/getdigits.png" hidden="true" width="100" height="100" />
         <img id="play_audio-image" src="'.$module_path.'/images/large/play_audio.png" hidden="true" width="100" height="100" />
         <img id="transfer-image" src="'.$module_path.'/images/large/transfer.png" hidden="true" width="100" height="100" />
         <img id="record-image" src="'.$module_path.'/images/large/recording.png" hidden="true" width="100" height="100" />         
         <img id="play_menu-image" src="'.$module_path.'/images/large/options.png" hidden="true" width="100" height="100" />         
         <img id="amd-image" src="'.$module_path.'/images/large/amd.png" hidden="true" width="100" height="100" />         
         <img id="dnc-image" src="'.$module_path.'/images/large/dnc.png" hidden="true" width="100" height="100" />         
         <img id="tts-image" src="'.$module_path.'/images/large/tts.png" hidden="true" width="100" height="100" />         
         
         <img id="edit" src="'.$module_path.'/images/small/edit.png" hidden="true" width="10" height="10" />         
         
        </div>
        </div>'
  );
  
  $form['ivr']['description'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Description'),
    '#default_value' => $ivr['description'],
  );
  
  // properties window for play_audio
  $form['ivr']['play_audio_properties'] = array(
    '#type'       => 'markup',
    '#prefix'     =>  '<div id="boxes">
                       <div id="dialog_pa" class="window dialog" style="margin:0px;">
                       <h1 style="color:white; text-indent:10%">Play Audio Application</h1>
                       <br/><span><b>Select Audio Recording</b></span>',
    '#suffix'    =>   '<img src="'.$module_path.'/images/small/play_audio.png"/>
                       <br/>
                       <br/>
                       <a href="#" class="close" onclick="javascript:saveRecordingData();"/><font size="4" color="red">Apply</font></a>
                       </div>
                       <!-- Mask to cover the whole screen -->
                       <div id="mask_pa" class="mask" style="margin: 0px;"></div>
                       </div>'
  );
  $form['ivr']['play_audio_properties']['recording_id'] = array(
    '#type'          => 'select',
    '#options'       => array(-1 => t('[Select Recording]')) + broadcast_recording_option(),
    '#default_value' => $ivr['recording_id']
  );
  
  // properties window for text-to-speech
  $form['ivr']['tts_properties'] = array(
    '#type'       => 'markup',
    '#prefix'     =>  '<div id="boxes">
                       <div id="dialog_tts" class="window dialog" style="margin:0px;">
                       <h1 style="color:white; text-indent:5%">Text-To-Speech Application</h1>
                       <br/><span><b>Enter Text-to-speech</b></span> ',
    '#suffix'     =>  '<br/>
                       <a href="#" class="close" onclick="javascript:saveTTSData();"/><font size="4" color="red">Apply</font></a>
                       </div>
                       <!-- Mask to cover the whole screen -->
                       <div id="mask_tts" class="mask" style="margin: 0px;"></div>
                       </div>'
  );
  $form['ivr']['tts_properties']['tts'] = array(
    '#type'          => 'textarea',
    '#default_value' => $ivr['tts']
  );
  
  // properties window for transfer call
  $form['ivr']['transfer_properties'] = array(
    '#type'       => 'markup',
    '#prefix'     =>  '<div id="boxes">
                       <div id="dialog_transfer" class="window dialog" style="margin:0px;">
                       <h1 style="color:white; text-indent:5%">Call Transfer Application</h1>
                       <br/><span><b>Agent/Operator Extension</b></span> ',
    '#suffix'     =>  '<img src="'.$module_path.'/images/small/transfer.png"/>
                       <br/>
                       <br/>
                       <a href="#" class="close" onclick="javascript:saveTransferData();"/><font size="4" color="red">Apply</font></a>
                       </div>
                       <!-- Mask to cover the whole screen -->
                       <div id="mask_transfer" class="mask" style="margin: 0px;"></div>
                       </div>'
  );
  $form['ivr']['transfer_properties']['extension_id'] = array(
    '#type'          => 'select',
    '#options'       => array(-1 => t('[Select Extension]')),
    '#default_value' => $ivr['extension_id']
  );
  
  // properties window for getdigit (getdigit)
  $form['ivr']['getdigit_properties'] = array(
    '#type'       => 'markup',
    '#prefix'     =>  '<div id="boxes">
                       <div id="dialog_getdigit" class="window dialog" style="margin:0px;">
                       <h1 style="color:white; text-indent:5%">GetDigit (Input) Application</h1>
                       <br/><span><b>Recording File to Play</b></span> ',
    '#suffix'     =>  '<img src="'.$module_path.'/images/small/getdigits.png"/>
                       <br/>
                       <br/>
                       <a href="#" class="close" onclick="javascript:saveGetdigitData();"/><font size="4" color="red">Apply</font></a>
                       </div>
                       <!-- Mask to cover the whole screen -->
                       <div id="mask_getdigit" class="mask" style="margin: 0px;"></div>
                       </div>'
  );
  $form['ivr']['getdigit_properties']['getdigit_recording_id'] = array(
    '#type'          => 'select',
    '#options'       => array(-1 => t('[Select Recording]')) + broadcast_recording_option(),
    '#default_value' => $ivr['getdigit_recording_id']
  );
  /////////////////////////////////////////////////////////
  
  $form['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

function broadcast_ivr_form_validate($form, &$form_state) {
  $existing_record = 0;
  $ivr         = $form_state['values'];

  if (isset($ivr['ivr_id'])) {
    // we are editing an existing record
    $existing_record = $ivr['ivr_id'];
  }

  if ($ivr['name'] == '') {
    form_set_error('name', t('ivr name cannot be empty'));
  }
  //drupal_add_js('serializeArray();','inline','header',true);
}

/**
 * Inserts a new ivr, or updates an existing one.
 *
 */
function broadcast_ivr_form_submit($form, &$form_state) {
  global $user;
  $onsubmit = 'Drupal.behaviors.broadcast_ivr = { attach: function(){serializeArray();}}';
  drupal_add_js($onsubmit,array('type'=>'inline','scope'=>'header'));
  
  //$path = file_directory_path() . "/broadcast/ivr";
  $ivr = $form_state['values'];
  
  if (!isset($ivr['created'])) {
    $ivr['created'] = time();
  }
  if (!isset($ivr['created_by'])) {
    $ivr['created_by'] = $user->uid;
  }
  
  if($ivr['description']==null) {
    $ivr['description'] = '';
  }
  // save the ivr
  if (isset($ivr['ivr_id'])) {
    drupal_write_record('broadcast_ivr', $ivr, 'ivr_id');
  }
  else {
    drupal_write_record('broadcast_ivr', $ivr);
  }
  drupal_set_message(t('IVR saved successfully!'), 'status');
  $form_state['redirect'] = 'broadcast/files/ivr/list';
}

/**
 * Deletes a ivr, given its unique ID.
 *
 * @param $ivr
 *   An array of ivr containing the ID of a ivr
 */
function broadcast_ivr_delete($ivr) {
  $sql = 'DELETE FROM {broadcast_ivr} WHERE ivr_id = :ivr_id';
  if(db_query($sql, array(':ivr_id'=>$ivr['ivr_id']))) {
    drupal_set_message(t('IVR deleted successfully!'), 'status');
  } else {
    drupal_set_message(t('Cannot delete specified IVR! or you have not proper permissions!'), 'error');
  }
  drupal_goto('broadcast/files/ivr/list');
}

function broadcast_ivr_option() {
  $sql = "SELECT * FROM {broadcast_ivr}";
  $sql = broadcast_db_filter($sql, '{broadcast_ivr}');
  $result = db_query($sql);
  $rows = array();
  while ($ivr = $result->fetchAssoc()) {
    $row_id = $ivr['ivr_id'];
    $rows[$row_id] = check_plain($ivr['name']);
  }
  if (!isset($rows)) {
    return FALSE;
  }
  return $rows;
}


/*
function broadcast_ivr_admin_settings() {
  $form['phone'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Phone Number Validation Rules')
  );
  $form['phone']['broadcast_ivr_phone_format_gsm'] = array(
    '#type'          => 'textfield',
    '#title'         => t("GSM Phone Number's Patterns"),
    '#default_value' => variable_get('broadcast_ivr_phone_format_gsm', '923XXXXXXXXX'),
    '#description'   => t('All Numbers in GSM Contacts will be validated against these patterns'),
  );
  $form['phone']['broadcast_ivr_phone_format_other'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Other Phone Number's Patterns"),
    '#default_value' => variable_get('broadcast_ivr_phone_format_other', '92XX.'),
    '#description'   => t('All Numbers in Other Contacts will be validated against these patterns'),
  );
  $form['phone']['broadcast_ivr_phone_duplicate_group'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('No duplicate Phone Number'),
    '#description'   => t('In a group no phone number will be repeated'),
    '#default_value' => variable_get('broadcast_ivr_phone_duplicate_group', '1'),
    '#return_value'  => 1,
  );
  $form['email'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Email Validation Rules')
  );
  $form['email']['broadcast_ivr_email_duplicate_group'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('No duplicate Emails'),
    '#description'   => t('In a group no email will be repeated'),
    '#default_value' => variable_get('broadcast_ivr_email_duplicate_group', '1'),
    '#return_value'  => 1,
  );

  return system_settings_form($form);
}
*/
