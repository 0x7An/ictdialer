<?php
/******************************************************************
* Copyright Â© 2009 ICT Innovations.                               *
* Developed By: Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Website : http://www.ictinnovations.com/                        *
* Mail : info@ictinnovations.com                                  *
******************************************************************/

// $Id: ictcontact.module,v 1.0 2009/10/16 18:08:59 ictinnovations Exp $

/**
 * @file
 * Provides support to add contact and manage contact groups which can be used
 * with broadcast module.
 */

/**
 * Implementation of hook_menu().
 *
 * Defines six menu entries: an Contacts page that lists all contacts in the module's
 * database table, add and edit/add/delete pages for each contact, and six more
 * menu entries for group management, and one more entry to import bulk contacts
 * into database.
 */
function broadcast_contact_menu() {
  $items = array();

  $items['broadcast/contact'] = array(
    'title'            => 'Contacts',
    'description'      => 'Manage Contacts',
    'page callback'    => 'broadcast_contact_list',
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['broadcast/contact/'] = array(
    'title'            => 'Contacts',
    'description'      => 'Manage Contacts',
    'page callback'    => 'broadcast_contact_list',
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -10,
  );

  $items['broadcast/contact/list'] = array(
    'title'            => 'List',
    'description'      => 'Manage Contacts',
    'page callback'    => 'broadcast_contact_list',
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );

  $items['broadcast/contact/add'] = array(
    'title'            => 'Create New Contact',
    'description'      => 'Add / Create new Contacts',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_contact_form'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact admin'),
    'type'             => MENU_LOCAL_TASK,
  );

  $items['broadcast/contact/%broadcast_contact/edit'] = array(
    'title'            => 'Edit Contact',
    'description'      => 'Edit / Change Contact',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_contact_form', 2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact admin'),
    'type'             => MENU_CALLBACK,
  );

  $items['broadcast/contact/%broadcast_contact/delete'] = array(
    'title'            => 'Delete Contact',
    'description'      => 'Delete Contact',
    'page callback'    => 'broadcast_contact_delete',
    'page arguments'   => array(2),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact admin'),
    'type'             => MENU_CALLBACK,
  );

  $items['broadcast/contact/group'] = array(
    'title'            => 'Contact Groups',
    'description'      => 'Manage Contact Groups',
    'page callback'    => 'broadcast_contact_group_list',
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact group'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['broadcast/contact/group/list'] = array(
    'title'            => 'List',
    'description'      => 'Manage Contact Groups',
    'page callback'    => 'broadcast_contact_group_list',
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact group'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );

  $items['broadcast/contact/group/add'] = array(
    'title'            => 'Create New Group',
    'description'      => 'Add / Create new Contact Groups',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_contact_group_form'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact group admin'),
    'type'             => MENU_LOCAL_TASK,
  );

  $items['broadcast/contact/group/%broadcast_contact_group/browse'] = array(
    'title'            => 'Browse Group Contacts',
    'description'      => 'Manage Group Contacts',
    'page callback'    => 'broadcast_contact_list',
    'page arguments'   => array(3),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact group'),
    'type'             => MENU_CALLBACK,
  );

  $items['broadcast/contact/group/%broadcast_contact_group/edit'] = array(
    'title'            => 'Edit Contact Group',
    'description'      => 'Edit / Change Contact Group',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_contact_group_form', 3),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact group admin'),
    'type'             => MENU_CALLBACK,
  );

  $items['broadcast/contact/group/%broadcast_contact_group/delete'] = array(
    'title'            => 'Delete Contact Group',
    'description'      => 'Delete / Change Contact Group',
    'page callback'    => 'broadcast_contact_group_delete',
    'page arguments'   => array(3),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact group admin'),
    'type'             => MENU_CALLBACK,
  );

  $items['broadcast/contact/import'] = array(
    'title'            => 'Import Contacts',
    'description'      => 'Import new Contacts into groups',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_contact_import'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact admin'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['broadcast/contact/error'] = array(
    'title'            => 'Error Group',
    'description'      => 'Orphan Contacts / Error Contacts',
    'page callback'    => 'broadcast_contact_list',
    'page arguments'   => array('error'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact group'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/broadcast/contact'] = array(
    'title'            => 'Contact Settings',
    'description'      => 'Configure contacts',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('broadcast_contact_admin_settings'),
    'access callback'  => 'broadcast_access',
    'access arguments' => array('broadcast contact system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on contact module.
 */
function broadcast_contact_perm() {
  return array(
    'broadcast contact',
    'broadcast contact admin',
    'broadcast contact group',
    'broadcast contact group admin',
    'broadcast contact system admin'
  );
}

/**
 * Page function for contact List
 *
 * It will show a list of available contacts in form of list
 *
 * @return
 * page html
*/
function broadcast_contact_list($contact_group = FALSE) {
  $sql     = "SELECT {broadcast_contact}.* FROM {broadcast_contact}";
  $sql_var = 0;

  if (is_array($contact_group)) {
    $sql .= ' JOIN {broadcast_contact_link} ON
      {broadcast_contact}.contact_id = {broadcast_contact_link}.contact_id
      WHERE {broadcast_contact_link}.contact_group_id = %d';
    $sql_var = $contact_group['contact_group_id'];
    $sql = broadcast_db_filter($sql);
  } else if ($contact_group == 'error') {
    $sql .= ' LEFT JOIN {broadcast_contact_link} ON
      {broadcast_contact}.contact_id = {broadcast_contact_link}.contact_id
      WHERE {broadcast_contact_link}.contact_id IS NULL';
    $sql = broadcast_db_filter($sql);
  } else {
    $sql = broadcast_db_filter($sql, '{broadcast_contact}');
  }

  $header = array(
    array('data' => t('First Name'), 'field' => 'first_name', 'sort' => 'asc'),
    array('data' => t('Last Name'),  'field' => 'last_name'),
    array('data' => t('Phone'),      'field' => 'phone'),
    array('data' => t('E-Mail'),     'field' => 'email'),
    array('data' => t('Operations')),
  );
  $sql .= tablesort_sql($header);

  $limit  = 10;
  $result = pager_query($sql, $limit, 0, NULL, $sql_var);

  while ($contact = db_fetch_array($result)) {
    $row_id = $contact['contact_id'];
    $rows[$row_id][] = check_plain($contact['first_name']);
    $rows[$row_id][] = check_plain($contact['last_name']);
    $rows[$row_id][] = check_plain($contact['phone']);
    $rows[$row_id][] = check_plain($contact['email']);
    $rows[$row_id][] = _broadcast_contact_list_links($contact);
  }
  if (!isset($rows)) {
    $rows[] = array(array('data' => t('No contacts have been added.'), 'colspan' => 5));
  }

  $output = theme_table($header, $rows);
  $output .= theme_pager(NULL, $limit);

  return $output;
}

/**
 * Build the edit and delete links for a single contact.
 *
 * @see broadcast_contact_list()
 */
function _broadcast_contact_list_links($contact) {
  $links['edit'] = array(
    'title' => t('Edit'),
    'href' => 'broadcast/contact/' . $contact['contact_id'] . '/edit',
    'html' => TRUE,
  );
  $links['delete'] = array(
    'title' => t('Delete'),
    'href' => 'broadcast/contact/' . $contact['contact_id'] . '/delete',
    'html' => TRUE,
  );
  return theme_links($links);
}

/**
 * Loader function for individual contacts.
 *
 * As we have used '%broadcast_contact' as a wildcard in our hook_menu()
 *
 * @param $contact_id
 *   An int containing the ID of a contact.
 * @return
 *   A single contact in array format, or FALSE if none matched the incoming ID.
 */
function broadcast_contact_load($contact_id) {
  $sql    = "SELECT * FROM {broadcast_contact} WHERE contact_id = %d";
  $sql    = broadcast_db_filter($sql);
  $result = db_query($sql, $contact_id);
  if ($contact = db_fetch_array($result)) {
    // every contact may also have some groups assigned to it,
    // so fetch there id into $contact['selected_group'] as arrays
    $sql    = "SELECT contact_group_id FROM {broadcast_contact_link} WHERE contact_id = %d";
    $result = db_query($sql, $contact_id);

    $contact['selected_group'] = array();
    while ($contact_group = db_fetch_array($result)) {
      $contact['selected_group'][] = $contact_group['contact_group_id'];
    }

    return $contact;

  }
  else {
    drupal_set_message(t('Specified Contact does not exist!!'), 'error');
    return FALSE;
  }
}

/**
 * Build the contact editing form.
 *
 * @ingroup forms
 * @see broadcast_contact_form_submit()
 */
function broadcast_contact_form(&$form_state, $contact = array()) {
  // It's safe to use on both an empty array, and an incoming array with full or partial data.
  $contact += array(
    'first_name'    => '',
    'last_name'     => '',
    'company'       => '',
    'address'       => '',
    'phone'         => '',
    'email'         => '',
    'description'   => '',
    'selected_group'=> array(''),
  );

  // If we're editing an existing contact, we'll add a value field to the form
  // containing the contact's unique ID.
  if (!empty($contact['contact_id'])) {
    $form['contact_id'] = array(
      '#type'        => 'value',
      '#value'       => $contact['contact_id'],
    );
  }

  $form['personal'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Personal Information'),
  );

  $form['personal']['first_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('First Name'),
    '#required'      => TRUE,
    '#default_value' => $contact['first_name'],
  );

  $form['personal']['last_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Last Name'),
    '#default_value' => $contact['last_name'],
  );

  $form['personal']['company'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Company'),
    '#default_value' => $contact['company'],
  );

  $form['contact'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Contact Addresses'),
  );

  $form['contact']['address'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Address'),
    '#default_value' => $contact['address'],
  );

  $form['contact']['phone'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Phone Number'),
    '#required'      => TRUE,
    '#default_value' => $contact['phone'],
  );

  $form['contact']['email'] = array(
    '#type'          => 'textfield',
    '#title'         => t('E-Mail'),
    '#required'      => TRUE,
    '#default_value' => $contact['email'],
  );

  $form['remark'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Comments / Remarks'),
  );

  $form['remark']['description'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Description'),
    '#default_value' => $contact['description'],
  );

  $form['group'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Groups'),
  );

//  $headers = _broadcast_contact_group_header();
  $options = _broadcast_contact_group_option();
  if (!empty($options)) {
    $form['group']['selected_group'] = array(
      '#type'            => 'checkboxes',
      '#title'         => t('Related Groups'),
//      '#header'          => $headers,
      '#options'         => $options,
      '#default_value'   => $contact['selected_group'],
      '#multiple'        => TRUE,
    );
  }

  $form['buttons']['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

function _broadcast_contact_group_option() {
  $sql = "SELECT * FROM {broadcast_contact_group}";
  $sql = broadcast_db_filter($sql, '{broadcast_contact_group}');
  $result = db_query($sql);

  $rows = array();
  while ($contact_group = db_fetch_array($result)) {
    $row_id = $contact_group['contact_group_id'];
    $rows[$row_id] = check_plain($contact_group['title']);
  }
  if (!isset($rows)) {
    return FALSE;
  }
  return $rows;
}

/* TODO: currently tableselect does not work
function _broadcast_contact_group_header() {
  $header = array(
    'title'       => array('data' => t('Title'), 'field' => 'title', 'sort' => 'asc'),
    'type'        => array('data' => t('Type'), 'field' => 'type'),
    'description' => array('data' => t('Description'), 'field' => 'description'),
  );
  return $header;
}

function _broadcast_contact_group_option($header) {
  $sql = "SELECT * FROM {broadcast_contact_group}";
  $sql .= tablesort_sql($header);

  $limit = 50;
  $result = pager_query($sql, $limit);

  $rows = array();
  while ($contact_group = db_fetch_array($result)) {
    $row_id = $contact_group['contact_group_id'];
    $rows[$row_id] = check_plain($contact_group['title']);
    $rows[$row_id] = check_plain(ucfirst($contact_group['type']));
    $rows[$row_id] = check_plain($contact_group['description']);
  }
  if (!isset($rows)) {
    $rows[] = array(array('data' => t('No contacts have been added.'), 'colspan' => 3));
  }
  return $rows;
} */

function broadcast_contact_form_validate($form, &$form_state) {
  $existing_record = 0;
  $contact         = $form_state['values'];

  if (isset($contact['contact_id'])) {
    // we are editing an existing record
    $existing_record = $contact['contact_id'];
  }

  if (!broadcast_contact_email_validate($contact['email'])) {
    form_set_error('email', t('Please enter a valid email address'));
  }

  $contact_group_count = 0;
  foreach ($contact['selected_group'] as $key => $group) {
    if ($group != 0) { // only if this group is selected
      $contact_group = broadcast_contact_group_load($key);

      if (broadcast_contact_phone_validate($contact['phone'], $contact_group['type']) === false) {
        form_set_error(
          'group', 
          t('Cannot add %phone into %group! format mismatch!', 
            array('%phone' => $contact['phone'], '%group' => $contact_group['title'])
          )
        );
      } else {
      	$form_state['values']['phone'] = broadcast_contact_phone_validate($contact['phone'], $contact_group['type']);
      }

      if (!broadcast_contact_check_duplicate('phone', $contact['phone'], $contact_group['contact_group_id'], $existing_record)) {
        form_set_error(
          'phone',
          t('Cannot add %phone into %group, already exist in group', 
            array('%phone' => $contact['phone'], '%group' => $contact_group['title'])
          )
        );
      }

      if (!broadcast_contact_check_duplicate('email', $contact['email'], $contact_group['contact_group_id'], $existing_record)) {
        form_set_error(
          'email',
          t('Cannot add %email into %group, already exist in group', 
            array('%email' => $contact['email'], '%group' => $contact_group['title'])
          )
        );
      }

      $contact_group_count++;
    }
  }
  
  if ($contact_group_count == 0) {
    form_set_error('group', t('No group selected! Please select at least one group'));
  }

}

function broadcast_contact_email_validate($email) {
  if (!preg_match('/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,7})+$/', $email)) {
    drupal_set_message(t('%email is an invalid email!', array('%email' => $email)), 'warning');
    return FALSE;
  }
  return TRUE;
}

function broadcast_contact_phone_validate($number, $contact_group_type) {
  static $aPatterns = FALSE;
  $pattern_full   = '';
  $pattern_add    = '';
  $pattern_remove = '';
  $pattern_match  = '';

  if (!$aPatterns) {
    $aPatterns          = array();
    $gsmInput           = variable_get('broadcast_contact_phone_format_gsm', '923XXXXXXXXX');
    $gsmInput           = strtoupper(str_replace('+', '\\+', $gsmInput));
    $aPatterns['gsm']   = _broadcast_contact_phone_validate_helper($gsmInput);
    $otherInput         = variable_get('broadcast_contact_phone_format_other', '92XX.');
    $otherInput         = strtoupper(str_replace('+', '\\+', $otherInput));
    $aPatterns['other'] = _broadcast_contact_phone_validate_helper($otherInput);
  }

  if ($contact_group_type == 'gsm') {
    $aTestPattern = $aPatterns['gsm'];
  } else {
    $aTestPattern = $aPatterns['other'];
  }

  foreach($aTestPattern as $key => $test) {
    if (preg_match('/^'.$test['match'].'/i', $number)) {
      $number = $test['add'] . $number;
      return $number;
    }
    if (preg_match('/^'.$test['add'].$test['match'].'/i', $number)) {
      return $number;
    }
    if (preg_match('/^'.$test['drop'].$test['match'].'/i', $number)) {
      $number = $test['add'] . preg_replace('/^' . $test['drop'] . '/', '', $number);
      return $number;
    }
  }
  return false;
}

function _broadcast_contact_phone_validate_helper($pattern_input) {
  $aPatterns    = array();
  $patternArray = explode(',', $pattern_input);

  foreach($patternArray as $key => $pattern_full) {
	$aPatterns[$key] = array();
    $aPatterns[$key]['match'] = $pattern_full;

    if (strpos($aPatterns[$key]['match'], '|') !== false) {
      $result = explode('|', $aPatterns[$key]['match'], 2);
      $aPatterns[$key]['add']   = $result[0];
      $aPatterns[$key]['match'] = $result[1];
    } else {
      $aPatterns[$key]['add']   = '';
    }

    if (strpos($aPatterns[$key]['match'], '!') !== false) {
      $result       = explode('!', $aPatterns[$key]['match'], 2);
      $aPatterns[$key]['drop']  = $result[0];
      $aPatterns[$key]['match'] = $result[1];
    } else {
      $aPatterns[$key]['drop']  = '';
    }

    $aPatterns[$key]['match'] = $aPatterns[$key]['match'] . '$';
    $aPatterns[$key]['match'] = str_replace(
      array('X', 'Z', 'N', '.$'),
      array('[0-9]', '[1-9]', '[2-9]', '.'),
      $aPatterns[$key]['match']);

    $aPatterns[$key]['drop'] = str_replace(
      array('X', 'Z', 'N', '+', '&'),
      array('[0-9]', '[1-9]', '[2-9]', '\\+', '|'),
      $aPatterns[$key]['drop']);
  }
  return $aPatterns;
}

function broadcast_contact_check_duplicate($field, $value, $contact_group_id, $contact_id = 0) {
  if (variable_get('broadcast_contact_' . $field . '_duplicate_group', 0) != 1) {
    return TRUE;
  } else {
    $sql = "SELECT COUNT({broadcast_contact}.contact_id) AS total
      FROM {broadcast_contact} JOIN {broadcast_contact_link} 
        ON {broadcast_contact}.contact_id = {broadcast_contact_link}.contact_id
      WHERE {broadcast_contact}.contact_id != %d
        AND {broadcast_contact_link}.contact_group_id = %d
        AND {broadcast_contact}.$field = '%s'";
    $result = db_query($sql, $contact_id, $contact_group_id, $value);
    $total  = db_result($result);
    if ($total > 0) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Inserts a new contact, or updates an existing one.
 *
 * @param $contact
 *   A contact to be saved. If $contact['contact_id'] is set, the contact will be updated.
 *   Otherwise, a new contact will be inserted into the database.
 * @return
 *   The saved contact, with its ID set.
 */
function broadcast_contact_form_submit($form, &$form_state) {
  global $user;

  $contact = $form_state['values'];

  if (!isset($contact['created'])) {
    $contact['created'] = time();
  }
  if (!isset($contact['created_by'])) {
    $contact['created_by'] = $user->uid;
  }

  // save the contact
  if (isset($contact['contact_id'])) {
    drupal_write_record('broadcast_contact', $contact, 'contact_id');
  }
  else {
    drupal_write_record('broadcast_contact', $contact);
  }

  // also save assigned groups to this contact. but first delete existing groups
  $sql    = 'DELETE FROM {broadcast_contact_link} WHERE contact_id = %d';
  $result = db_query($sql, $contact['contact_id']);
  foreach ($contact['selected_group'] as $key => $group) {
    if ($group != 0) { // only if this group is selected
      $aSelectedGroup = array(
        'contact_group_id' => $key,
        'contact_id'       => $contact['contact_id']
      );
      drupal_write_record('broadcast_contact_link', $aSelectedGroup);
    }
  }

  drupal_set_message(t('Contact saved successfully!'), 'status');
  $form_state['redirect'] = 'broadcast/contact/list';
}

/**
 * Deletes a contact, given its unique ID.
 *
 * @param $contact
 *   An array of contact containing the ID of a contact and assigned groups.
 */
function broadcast_contact_delete($contact) {
  // first delete assigned group entries
  $sql = 'DELETE FROM {broadcast_contact_link} WHERE contact_id = %d';
  db_query($sql, $contact['contact_id']);

  $sql = 'DELETE FROM {broadcast_contact} WHERE contact_id = %d';
  db_query($sql, $contact['contact_id']);

  drupal_set_message(t('Contact deleted successfully!'), 'status');
  drupal_goto('broadcast/contact');
}

/**
 * Page function for contact_group List
 *
 * It will show a list of available contact_groups in form of list
 *
 * @return
 * page html
*/
function broadcast_contact_group_list() {
  $sql = "SELECT * FROM {broadcast_contact_group}";
  $sql = broadcast_db_filter($sql, '{broadcast_contact_group}');
  $header = array(
    array('data' => t('Title'),       'field' => 'title', 'sort' => 'asc'),
    array('data' => t('Type'),        'field' => 'type'),
    array('data' => t('Description'), 'field' => 'description'),
    array('data' => t('Operations')),
  );
  $sql .= tablesort_sql($header);

  $limit  = 10;
  $result = pager_query($sql, $limit);

  $rows = array();
  while ($contact_group = db_fetch_array($result)) {
    $row_id = $contact_group['contact_group_id'];
    $rows[$row_id][] = check_plain($contact_group['title']);
    $rows[$row_id][] = check_plain(ucfirst($contact_group['type']));
    $rows[$row_id][] = check_plain($contact_group['description']);
    $rows[$row_id][] = _broadcast_contact_group_list_links($contact_group);
  }
  if (!isset($rows)) {
    $rows[] = array(array('data' => t('No contacts group have been added.'), 'colspan' => 4));
  }

  $output = theme_table($header, $rows);
  $output .= theme_pager(NULL, $limit);

  return $output;
}

/**
 * Build the edit and delete links for a single contact_group.
 *
 * @see broadcast_contact_group_list()
 */
function _broadcast_contact_group_list_links($contact_group) {
  $links['edit'] = array(
    'title' => t('Edit'),
    'href' => 'broadcast/contact/group/' . $contact_group['contact_group_id'] . '/edit',
    'html' => TRUE,
  );
  $links['delete'] = array(
    'title' => t('Delete'),
    'href' => 'broadcast/contact/group/' . $contact_group['contact_group_id'] . '/delete',
    'html' => TRUE,
  );
  $links['browse'] = array(
    'title' => t('Browse Contacts'),
    'href' => 'broadcast/contact/group/' . $contact_group['contact_group_id'] . '/browse',
    'html' => TRUE,
  );
  return theme_links($links);
}

/**
 * Loader function for individual contact_groups.
 *
 * As we have used '%broadcast_contact_group' as a wildcard in our hook_menu()
 *
 * @param $contact_group_id
 *   An int containing the ID of a contact_group.
 * @return
 *   A single contact_group in array format, or FALSE if none matched the incoming ID.
 */
function broadcast_contact_group_load($contact_group_id) {
  $sql    = "SELECT * FROM {broadcast_contact_group} WHERE contact_group_id = %d";
  $sql    = broadcast_db_filter($sql);
  $result = db_query($sql, $contact_group_id);
  if ($contact_group = db_fetch_array($result)) {
    return $contact_group;
  }
  else {
    drupal_set_message(t('Specified Group does not exist! or you have not proper permissions!'), 'error');
    return FALSE;
  }
}

/**
 * Build the contact_group editing form.
 *
 * @in group forms
 * @see broadcast_contact_group_form_submit()
 */
function broadcast_contact_group_form(&$form_state, $contact_group = array()) {
  // It's safe to use on both an empty array, and an incoming array with full or partial data.
  $contact_group += array(
    'title'       => '',
    'type'        => '',
    'description' => '',
  );

  // If we're editing an existing contact_group, we'll add a value field to the form
  // containing the contact_group's unique ID.
  if (!empty($contact_group['contact_group_id'])) {
    $form['contact_group_id'] = array(
      '#type'        => 'value',
      '#value'       => $contact_group['contact_group_id'],
    );
  }

  $form['title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Title'),
    '#required'      => TRUE,
    '#default_value' => $contact_group['title'],
  );

  $form['type'] = array(
    '#type'          => 'select',
    '#title'         => t('Type'),
    '#options'       => array(
                          'gsm'   => t('GSM Contacts'),
                          'other' => t('Other Contacts'),
                        ),
    '#required'      => TRUE,
    '#default_value' => $contact_group['type'],
  );

  $form['description'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Description'),
    '#default_value' => $contact_group['description'],
  );

  $form['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

// NO need to validate contact group form, auto validation is sufficient 

/**
 * Inserts a new contact_group, or updates an existing one.
 *
 * @param $contact_group
 *   A contact_group to be saved. If $contact_group['contact_group_id'] is set, the contact_group will be updated.
 *   Otherwise, a new contact_group will be inserted into the database.
 * @return
 *   The saved contact_group, with its ID set.
 */
function broadcast_contact_group_form_submit($form, &$form_state) {
  global $user;

  $contact_group = $form_state['values'];

  if (!isset($contact_group['created'])) {
    $contact_group['created'] = time();
  }
  if (!isset($contact_group['created_by'])) {
    $contact_group['created_by'] = $user->uid;
  }

  // save the contact_group
  if (isset($contact_group['contact_group_id'])) {
    drupal_write_record('broadcast_contact_group', $contact_group, 'contact_group_id');
  }
  else {
    drupal_write_record('broadcast_contact_group', $contact_group);
  }

  drupal_set_message(t('Contact Group saved successfully!'), 'status');
  $form_state['redirect'] = 'broadcast/contact/group/list';
}

/**
 * Deletes a contact_group, given its unique ID.
 *
 * @param $contact_group
 *   An array of contact_group containing the ID of a contact_group and assigned groups.
 */
function broadcast_contact_group_delete($contact_group) {
  $sql = 'DELETE FROM {broadcast_contact_group} WHERE contact_group_id = %d';
  db_query($sql, $contact_group['contact_group_id']);

  $sql = 'DELETE FROM {broadcast_contact_link} WHERE contact_group_id = %d';
  db_query($sql, $contact_group['contact_group_id']);

  drupal_set_message(t('Contact Group deleted successfully!'), 'status');
  drupal_goto('broadcast/contact/group');
}

/**
 * Build the contact editing form.
 *
 * @ingroup forms
 * @see broadcast_contact_form_submit()
 */
function broadcast_contact_import(&$form_state) {

  $js = "
$('#edit-source-type').change(function() {
  if ($('#edit-source-type').val() == 'file') {
    $('#edit-from-file-wrapper').show()
    $('#edit-from-group-wrapper').hide()
  } else {
    $('#edit-from-file-wrapper').hide()
    $('#edit-from-group-wrapper').show()
  }
});";
  drupal_add_js($js, 'inline', 'footer');

  $form['#attributes'] = array('enctype' => 'multipart/form-data');

  $form['source_type'] = array(
    '#type'     => 'select',
    '#title'    => t('Type of Source'),
    '#options'  => array(
      'file'  => t('Upload contact via file'),
      'group' => t('Copy Contacts from existing Groups'),
    ),
  );

  $form['from_file'] = array(
    '#type'       => 'fieldset',
    '#attributes' => array('id' => 'edit-from-file-wrapper'),
    '#title'      => t('Import Contacts From'),
  );

  $form['from_file']['source_file'] = array(
    '#type'       => 'file',
    '#title'      => t("Upload Contact's File"),
  );

  $options = _broadcast_contact_group_option();

  $form['from_group'] = array(
    '#type'       => 'fieldset',
    '#attributes' => array(
      'id'    => 'edit-from-group-wrapper',
      'style' => 'display: none'
    ),
    '#title'      => t('Import Contacts From'),
  );

  $form['from_group']['source_group'] = array(
    '#type'     => 'checkboxes',
    '#title'    => t('Source Groups'),
    '#options'  => $options,
    '#multiple' => TRUE,
  );

  $form['into'] = array(
    '#type'       => 'fieldset',
    '#title'      => t('Import Contacts Into'),
  );

  $form['into']['target_group'] = array(
    '#type'     => 'select',
    '#title'    => t('Target Group'),
    '#options'  => $options,
  );

  $form['submit'] = array(
    '#type'       => 'submit',
    '#value'      => t('Submit'),
  );

  return $form;
}

function broadcast_contact_import_submit($form, &$form_state) {
  $import = $form_state['values'];

  // Ensure we have the file uploaded
  if ($import['source_type'] == 'file') {
    $file = file_save_upload('source_file');
    $total_rows = broadcast_contact_import_file($file->filepath, $import['target_group']);
  } else {
    $total_rows = broadcast_contact_import_group($import['source_group'], $import['target_group']);
  }

  drupal_set_message(t('%count Contacts imported successfully!', array('%count' => $total_rows)), 'status');
  drupal_goto('broadcast/contact/group/' . $import['target_group'] . '/browse');
}

function broadcast_contact_import_group($src_groups, $contact_group_id) {
  $total_rows    = 0;
  $contact_group = broadcast_contact_group_load($contact_group_id);

  foreach($src_groups as $key => $group_id) {
    if ($group_id != 0) { // only if this group is selected
      $contact_group_src = broadcast_contact_group_load($group_id);
      $sql               = "SELECT {broadcast_contact}.* 
                             FROM {broadcast_contact_link} JOIN {broadcast_contact}
                              ON {broadcast_contact_link}.contact_id = {broadcast_contact}.contact_id
                             WHERE contact_group_id = %d";
      $result            = db_query($sql, $contact_group_src['contact_group_id']);

      while ($contact = db_fetch_array($result)) {
        broadcast_contact_import_link($contact, $contact_group);
        $total_rows++;
      }
    }
  }
  return $total_rows;
}

function broadcast_contact_import_file($input_file, $contact_group_id) {
  global $user;

  /* TODO: currently excel files are not supported
  $ext = end(explode('.', $diallist['diallistFile']['name']));
  // Select whether we are using xls file or CSV
  if (strtolower($ext) == 'xls') {
      // in case of xls file first convert it to csv
      $file_name="/tmp/TMPCSV2MYSQL.CSV";
      $command = "xlhtml -csv -xp:0 ".$recFile['tmp_name']." > $file_name";
      exec($command);
  } else {
      $file_name = $recFile['tmp_name'];
  } */

  $total_rows    = 0;
  $contact_group = broadcast_contact_group_load($contact_group_id);

  $handle  = fopen($input_file, "r");
  while (($data = fgetcsv($handle, 500, ",")) !== FALSE) {
    $contact      = array();
    $contact_link = array();

    if (count($data) >= 5) {
      $contact['first_name']  = $data[0];
      $contact['last_name']   = $data[1];
      $contact['company']     = $data[2];
      $contact['address']     = $data[3];
      $contact['phone']       = $data[4];
      $contact['email']       = $data[5];
      $contact['description'] = $data[6];
      $contact['created']     = time();
      $contact['created_by']  = $user->uid;

      // first of all test if we have all required fields 
      if ($contact['first_name'] != '' && $contact['email'] != '' && $contact['phone'] != '') {
        // check if user has entered a valid email address
        if (broadcast_contact_email_validate($contact['email'])) {

          // if all is OK save the contact
          drupal_write_record('broadcast_contact', $contact);
          broadcast_contact_import_link($contact, $contact_group);
          $total_rows++;

        } else {
          // contact email is invalid
          drupal_set_message(
            t('Cannot add %email into %group, invalid email', 
              array('%email' => $contact['email'], '%group' => $contact_group['title'])
            ),
            'warning'
          );        
        }

      } else {
        // incomplete contact record
        drupal_set_message(
          t('incomplete record (name: %name, email: %email, phone: %phone)! cannot save, skipped!', 
            array('%name' => $contact['first_name'],'%email' => $contact['email'], '%phone' => $contact['phone'])
          ), 
          'warning'
        );
      }
    }
  }
  fclose($handle);

  return $total_rows;
}

function broadcast_contact_import_link($contact, $contact_group) {
  $contact_link = array();

  // check ether phone format match with group format
  // TODO: during linking phone can not be changed as defined in patterns
  if (broadcast_contact_phone_validate($contact['phone'], $contact_group['type']) !== false) {
    // check if phone number already exist in this group
    if (broadcast_contact_check_duplicate('phone', $contact['phone'], $contact_group['contact_group_id'])) {
      // check if email address already exist in this group
      if (broadcast_contact_check_duplicate('email', $contact['email'], $contact_group['contact_group_id'])) {

        // everything is fine add contact into group
        // Now add contact into group
        $contact_link['contact_id']       = $contact['contact_id'];
        $contact_link['contact_group_id'] = $contact_group['contact_group_id'];
        drupal_write_record('broadcast_contact_link', $contact_link);

      } else {
        // duplicate email address in group
        drupal_set_message(
          t('Skipped! Cannot add %email into %group, already exist in group', 
            array('%email' => $contact['email'], '%group' => $contact_group['title'])
          ),
          'warning'
        );
      }

    } else {
      // duplicate phone number in group
      drupal_set_message(
        t('Skipped! Cannot add %phone into %group, already exist in group', 
          array('%phone' => $contact['phone'], '%group' => $contact_group['title'])
        ),
        'warning'
      );
    }

  } else {
    // invalid phone format, does not match with group criteria 
    drupal_set_message(
      t('Skipped! Cannot add %phone into %group! format mismatch', 
        array('%phone' => $contact['phone'], '%group' => $contact_group['title'])
      ), 
      'warning'
    );
  }
}

function broadcast_contact_admin_settings() {
  $form['phone'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Phone Number Validation Rules')
  );
  $form['phone']['broadcast_contact_phone_format_gsm'] = array(
    '#type'          => 'textfield',
    '#title'         => t("GSM Phone Number's Patterns"),
    '#default_value' => variable_get('broadcast_contact_phone_format_gsm', '923XXXXXXXXX'),
    '#description'   => t('All Numbers in GSM Contacts will be validated against these patterns'),
  );
  $form['phone']['broadcast_contact_phone_format_other'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Other Phone Number's Patterns"),
    '#default_value' => variable_get('broadcast_contact_phone_format_other', '92XX.'),
    '#description'   => t('All Numbers in Other Contacts will be validated against these patterns'),
  );
  $form['phone']['broadcast_contact_phone_duplicate_group'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('No duplicate Phone Number'),
    '#description'   => t('In a group no phone number will be repeated'),
    '#default_value' => variable_get('broadcast_contact_phone_duplicate_group', '1'),
    '#return_value'  => 1,
  );
  $form['email'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Email Validation Rules')
  );
  $form['email']['broadcast_contact_email_duplicate_group'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('No duplicate Emails'),
    '#description'   => t('In a group no email will be repeated'),
    '#default_value' => variable_get('broadcast_contact_email_duplicate_group', '1'),
    '#return_value'  => 1,
  );

  return system_settings_form($form);
}
